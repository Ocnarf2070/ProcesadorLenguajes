package prCalculadora;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;


public class BinaryTree {
	private static class Tree<E>{
		E expr;
		Tree<E> left;
		Tree<E> right;
		public Tree(E expr) {
			this.expr=expr;
			left=null;
			right=null;
		}
		public Tree(E expr, Tree<E> left, Tree<E> right) {
			this.expr=expr;
			this.left=left;
			this.right=right;
		}
	}

	private Tree <String> root;	
	private String [] fp;
	private int pos;
	private Stack<Tree<String>> st;
	private int pa,pc;
	
	public BinaryTree()  {
		root=null;
		fp=new String [10];
		pos=0;
		st=new Stack<Tree<String>>();
		pa=0;
		pc=0;
	}

	private boolean isEmpty() {
		return root == null;
	}

	private void insert (String elem){
		if(isEmpty()&&!(elem.equals("(")||(elem.equals(")")))) {
			if(!st.isEmpty()&&pa==pc) {
				root = new Tree<String>(elem, st.top(), null);
				st.pop();
			}
			else root = new Tree<String>(elem);
		}
		else {
			if(elem.equals("+")||elem.equals("-")) {
				root = new Tree<String>(elem,root,null);
			}else if(elem.equals("*")||elem.equals("/")) {
				if(root.expr.equals("+")||root.expr.equals("-"))root.right=new Tree<String>(elem, root.right, null);
				else root=new Tree<String>(elem, root, null);
			}else if(elem.equals("(")){
				pa++;
				if(!isEmpty()) {
					st.push(root);
					root=null;
				}
			}else if(elem.equals(")")){
				pc++;
				if(!st.isEmpty()) {
					Tree<String> aux = st.top();
					st.pop();
					Tree<String> pos = aux;
					while(pos.right!=null) pos=pos.right;
					pos.right = root;
					root = aux;
				}else {
					st.push(root);
					root=null;
				}
			}else {
				Tree<String> pos = root;
				while(pos.right!=null) pos=pos.right;
				pos.right=new Tree<String>(elem);
			}
		}
	}

	private Tree<String> arbol(String [] ops){
		int i=0;
		while(ops[i]!=null)	{
			insert(ops[i]);
			i++;
			BTreePrinter.printTree(root);
		}
		if(!st.isEmpty()) throw new IllegalArgumentException();
		return this.root;
	}

	public String [] formaPolaca (String [] ops) {
		try{
			return formaPolacaRec(arbol(ops));
		}catch(NullPointerException ee) {
			ee.printStackTrace();
			throw new IllegalArgumentException();
		}
	}
	private String [] formaPolacaRec(Tree<String> tree) {
		if(tree != null) {
			formaPolacaRec(tree.left);
			formaPolacaRec(tree.right);
			if(pos==fp.length)fp=Arrays.copyOf(fp, pos * 2);			
			fp[pos] = tree.expr;
			pos++;
		}

		return fp;
	}

	private static class BTreePrinter{

		public static <T extends Comparable<?>> void printTree(Tree<T> root) {
			int maxLevel = BTreePrinter.maxLevel(root);

			printTreeInternal(Collections.singletonList(root), 1, maxLevel);
		}

		private static <T extends Comparable<?>> void printTreeInternal(List<Tree<T>> Trees, int level, int maxLevel) {
			if (Trees.isEmpty() || BTreePrinter.isAllElementsNull(Trees))
				return;

			int floor = maxLevel - level;
			int endgeLines = (int) Math.pow(2, (Math.max(floor - 1, 0)));
			int firstSpaces = (int) Math.pow(2, (floor)) - 1;
			int betweenSpaces = (int) Math.pow(2, (floor + 1)) - 1;

			BTreePrinter.printWhitespaces(firstSpaces);

			List<Tree<T>> newTrees = new ArrayList<Tree<T>>();
			for (Tree<T> Tree : Trees) {
				if (Tree != null) {
					System.out.print(Tree.expr);
					newTrees.add(Tree.left);
					newTrees.add(Tree.right);
				} else {
					newTrees.add(null);
					newTrees.add(null);
					System.out.print(" ");
				}

				BTreePrinter.printWhitespaces(betweenSpaces);
			}
			System.out.println("");

			for (int i = 1; i <= endgeLines; i++) {
				for (int j = 0; j < Trees.size(); j++) {
					BTreePrinter.printWhitespaces(firstSpaces - i);
					if (Trees.get(j) == null) {
						BTreePrinter.printWhitespaces(endgeLines + endgeLines + i + 1);
						continue;
					}

					if (Trees.get(j).left != null)
						System.out.print("/");
					else
						BTreePrinter.printWhitespaces(1);

					BTreePrinter.printWhitespaces(i + i - 1);

					if (Trees.get(j).right != null)
						System.out.print("\\");
					else
						BTreePrinter.printWhitespaces(1);

					BTreePrinter.printWhitespaces(endgeLines + endgeLines - i);
				}

				System.out.println("");
			}

			printTreeInternal(newTrees, level + 1, maxLevel);
		}

		private static void printWhitespaces(int count) {
			for (int i = 0; i < count; i++)
				System.out.print(" ");
		}

		private static <T extends Comparable<?>> int maxLevel(Tree<T> Tree) {
			if (Tree == null)
				return 0;

			return Math.max(BTreePrinter.maxLevel(Tree.left), BTreePrinter.maxLevel(Tree.right)) + 1;
		}

		private static <T> boolean isAllElementsNull(List<T> list) {
			for (Object object : list) {
				if (object != null)
					return false;
			}

			return true;
		}

	}


}
