
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 06 18:02:48 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 06 18:02:48 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\004\002\000\002\004\003\000\002\004\004" +
    "\000\002\003\004\000\002\013\002\000\002\014\002\000" +
    "\002\003\012\000\002\015\002\000\002\016\002\000\002" +
    "\003\011\000\002\017\002\000\002\003\012\000\002\020" +
    "\002\000\002\021\002\000\002\022\002\000\002\003\016" +
    "\000\002\003\007\000\002\003\005\000\002\011\003\000" +
    "\002\007\003\000\002\010\003\000\002\005\002\000\002" +
    "\005\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\004\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\012\003\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\023" +
    "\002\000\002\006\005\000\002\024\002\000\002\006\006" +
    "\000\002\025\002\000\002\006\006\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\032\002\ufffe\003\015\004\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\013\007\017\ufffe\021\ufffe\036\ufffe" +
    "\037\ufffe\001\002\000\030\004\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\013\007\017\ufffe\021\ufffe\022\ufffe\036\ufffe" +
    "\037\ufffe\001\002\000\004\017\uffea\001\002\000\040\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\020\uffe0\023\143\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\001\002\000\012\013\007\017\022\036\011" +
    "\037\006\001\002\000\004\017\126\001\002\000\036\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\024\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\001\002\000\032\002\ufffd\004\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\013\ufffd\017\ufffd\021\ufffd\022\ufffd\036" +
    "\ufffd\037\ufffd\001\002\000\004\017\115\001\002\000\026" +
    "\004\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4\017" +
    "\ufff4\021\ufff4\036\ufff4\037\ufff4\001\002\000\004\002\uffff" +
    "\001\002\000\004\017\102\001\002\000\030\002\001\004" +
    "\013\006\021\007\005\010\010\011\016\013\007\017\022" +
    "\021\004\036\011\037\006\001\002\000\014\012\041\013" +
    "\034\014\036\015\043\024\100\001\002\000\026\004\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\013\uffeb\017\uffeb\021" +
    "\uffeb\036\uffeb\037\uffeb\001\002\000\012\013\007\017\022" +
    "\036\011\037\006\001\002\000\004\017\ufff7\001\002\000" +
    "\004\002\025\001\002\000\004\002\000\001\002\000\004" +
    "\017\027\001\002\000\014\013\007\017\031\025\030\036" +
    "\011\037\006\001\002\000\014\013\uffd8\017\uffd8\025\uffd8" +
    "\036\uffd8\037\uffd8\001\002\000\014\013\007\017\031\025" +
    "\030\036\011\037\006\001\002\000\010\020\061\034\060" +
    "\035\062\001\002\000\026\012\041\013\034\014\036\015" +
    "\043\026\040\027\037\030\042\031\035\032\045\033\044" +
    "\001\002\000\012\013\007\017\022\036\011\037\006\001" +
    "\002\000\012\013\007\017\022\036\011\037\006\001\002" +
    "\000\012\013\007\017\022\036\011\037\006\001\002\000" +
    "\012\013\007\017\022\036\011\037\006\001\002\000\012" +
    "\013\007\017\022\036\011\037\006\001\002\000\012\013" +
    "\007\017\022\036\011\037\006\001\002\000\012\013\007" +
    "\017\022\036\011\037\006\001\002\000\012\013\007\017" +
    "\022\036\011\037\006\001\002\000\012\013\007\017\022" +
    "\036\011\037\006\001\002\000\012\013\007\017\022\036" +
    "\011\037\006\001\002\000\022\012\041\013\034\014\036" +
    "\015\043\020\uffdc\024\uffdc\034\uffdc\035\uffdc\001\002\000" +
    "\022\012\041\013\034\014\036\015\043\020\uffda\024\uffda" +
    "\034\uffda\035\uffda\001\002\000\036\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\020\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000" +
    "\022\012\041\013\034\014\036\015\043\020\uffdb\024\uffdb" +
    "\034\uffdb\035\uffdb\001\002\000\036\012\uffe7\013\uffe7\014" +
    "\036\015\043\020\uffe7\024\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\001\002\000" +
    "\022\012\041\013\034\014\036\015\043\020\uffde\024\uffde" +
    "\034\uffde\035\uffde\001\002\000\022\012\041\013\034\014" +
    "\036\015\043\020\uffdd\024\uffdd\034\uffdd\035\uffdd\001\002" +
    "\000\036\012\uffe5\013\uffe5\014\uffe5\015\uffe5\020\uffe5\024" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\001\002\000\022\012\041\013\034\014" +
    "\036\015\043\020\uffd9\024\uffd9\034\uffd9\035\uffd9\001\002" +
    "\000\036\012\uffe6\013\uffe6\014\036\015\043\020\uffe6\024" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\001\002\000\014\013\uffd6\017\uffd6\025" +
    "\uffd6\036\uffd6\037\uffd6\001\002\000\026\004\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\013\ufff6\017\ufff6\021\ufff6\036" +
    "\ufff6\037\ufff6\001\002\000\014\013\uffd4\017\uffd4\025\uffd4" +
    "\036\uffd4\037\uffd4\001\002\000\014\013\007\017\031\025" +
    "\030\036\011\037\006\001\002\000\012\020\uffd3\024\uffd3" +
    "\034\060\035\062\001\002\000\026\004\013\006\021\007" +
    "\005\010\010\011\016\013\007\017\022\021\004\036\011" +
    "\037\006\001\002\000\034\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\017\ufff5\021\ufff5" +
    "\022\ufff5\036\ufff5\037\ufff5\001\002\000\014\013\007\017" +
    "\031\025\030\036\011\037\006\001\002\000\012\020\uffd5" +
    "\024\uffd5\034\060\035\uffd5\001\002\000\010\020\074\034" +
    "\060\035\062\001\002\000\030\012\041\013\034\014\036" +
    "\015\043\020\073\026\040\027\037\030\042\031\035\032" +
    "\045\033\044\001\002\000\036\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\020\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002\000\012" +
    "\020\uffd2\024\uffd2\034\uffd2\035\uffd2\001\002\000\014\013" +
    "\007\017\031\025\030\036\011\037\006\001\002\000\012" +
    "\020\uffd7\024\uffd7\034\060\035\062\001\002\000\014\012" +
    "\041\013\034\014\036\015\043\020\073\001\002\000\034" +
    "\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\013\ufffb\017\ufffb\021\ufffb\022\ufffb\036\ufffb\037\ufffb" +
    "\001\002\000\032\002\ufffc\004\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\013\ufffc\017\ufffc\021\ufffc\022\ufffc\036\ufffc" +
    "\037\ufffc\001\002\000\012\013\007\017\022\036\011\037" +
    "\006\001\002\000\014\012\041\013\034\014\036\015\043" +
    "\020\104\001\002\000\004\024\105\001\002\000\034\002" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\013\uffee\017\uffee\021\uffee\022\uffee\036\uffee\037\uffee\001" +
    "\002\000\026\004\013\006\021\007\005\010\010\011\016" +
    "\013\007\017\022\021\004\036\011\037\006\001\002\000" +
    "\004\007\110\001\002\000\004\017\111\001\002\000\014" +
    "\013\007\017\031\025\030\036\011\037\006\001\002\000" +
    "\010\020\113\034\060\035\062\001\002\000\004\024\114" +
    "\001\002\000\034\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\013\ufff3\017\ufff3\021\ufff3\022\ufff3" +
    "\036\ufff3\037\ufff3\001\002\000\014\013\007\017\031\025" +
    "\030\036\011\037\006\001\002\000\010\020\ufffa\034\060" +
    "\035\062\001\002\000\004\020\120\001\002\000\026\004" +
    "\013\006\021\007\005\010\010\011\016\013\007\017\022" +
    "\021\004\036\011\037\006\001\002\000\034\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9" +
    "\017\ufff9\021\ufff9\022\ufff9\036\ufff9\037\ufff9\001\002\000" +
    "\034\002\uffe9\004\uffe9\005\124\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\013\uffe9\017\uffe9\021\uffe9\022\uffe9\036\uffe9\037" +
    "\uffe9\001\002\000\034\002\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\011\ufff8\013\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\036\ufff8\037\ufff8\001\002\000\026\004\013\006\021" +
    "\007\005\010\010\011\016\013\007\017\022\021\004\036" +
    "\011\037\006\001\002\000\034\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\017\uffe8\021" +
    "\uffe8\022\uffe8\036\uffe8\037\uffe8\001\002\000\012\013\007" +
    "\017\022\036\011\037\006\001\002\000\014\012\041\013" +
    "\034\014\036\015\043\024\131\001\002\000\014\013\ufff2" +
    "\017\ufff2\025\ufff2\036\ufff2\037\ufff2\001\002\000\014\013" +
    "\uffec\017\uffec\025\uffec\036\uffec\037\uffec\001\002\000\014" +
    "\013\007\017\031\025\030\036\011\037\006\001\002\000" +
    "\010\024\131\034\060\035\062\001\002\000\012\013\ufff1" +
    "\017\ufff1\036\ufff1\037\ufff1\001\002\000\012\013\007\017" +
    "\022\036\011\037\006\001\002\000\014\012\041\013\034" +
    "\014\036\015\043\020\137\001\002\000\026\004\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\017\ufff0\021\ufff0" +
    "\036\ufff0\037\ufff0\001\002\000\026\004\013\006\021\007" +
    "\005\010\010\011\016\013\007\017\022\021\004\036\011" +
    "\037\006\001\002\000\034\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\013\uffef\017\uffef\021\uffef" +
    "\022\uffef\036\uffef\037\uffef\001\002\000\036\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\020\uffe3\024\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001" +
    "\002\000\012\013\007\017\022\036\011\037\006\001\002" +
    "\000\036\012\041\013\034\014\036\015\043\020\uffe1\024" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\001\002\000\030\004\013\006\021\007" +
    "\005\010\010\011\016\013\007\017\022\021\004\022\146" +
    "\036\011\037\006\001\002\000\034\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\013\uffed\017\uffed" +
    "\021\uffed\022\uffed\036\uffed\037\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\016\002\023\003\011\004\016\007\013\010" +
    "\022\012\017\001\001\000\014\003\011\004\144\007\013" +
    "\010\022\012\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\100\007\013\010\022\012\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\076\001\001\000\004" +
    "\015\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\031\012\032\001\001\000\004" +
    "\023\074\001\001\000\006\006\070\012\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\056\001\001" +
    "\000\004\012\055\001\001\000\004\012\054\001\001\000" +
    "\004\012\053\001\001\000\004\012\052\001\001\000\004" +
    "\012\051\001\001\000\004\012\050\001\001\000\004\012" +
    "\047\001\001\000\004\012\046\001\001\000\004\012\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\066\001\001\000\004\016\064" +
    "\001\001\000\004\025\062\001\001\000\006\006\063\012" +
    "\032\001\001\000\002\001\001\000\012\003\065\007\013" +
    "\010\022\012\017\001\001\000\002\001\001\000\006\006" +
    "\067\012\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\075\012\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\106\007\013\010\022\012\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\111" +
    "\012\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\115\012\032\001\001\000\004" +
    "\013\116\001\001\000\002\001\001\000\012\003\120\007" +
    "\013\010\022\012\017\001\001\000\004\014\121\001\001" +
    "\000\004\005\122\001\001\000\002\001\001\000\012\003" +
    "\124\007\013\010\022\012\017\001\001\000\002\001\001" +
    "\000\004\012\126\001\001\000\004\011\127\001\001\000" +
    "\004\020\131\001\001\000\002\001\001\000\006\006\132" +
    "\012\032\001\001\000\004\011\133\001\001\000\004\021" +
    "\134\001\001\000\004\012\135\001\001\000\002\001\001" +
    "\000\004\022\137\001\001\000\012\003\140\007\013\010" +
    "\022\012\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\143\001\001\000\002\001\001\000\012\003" +
    "\100\007\013\010\022\012\017\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private static int contador=0;
	private static String temporal(){
		String temporal = "t"+contador;
		contador++;
		return temporal;
	}
	private static boolean not=false;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Condicion ::= AP Condicion CP 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Condicion ::= Condicion OR NT$10 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   PLC.gc("LABEL",null,null,c.v(not)); 
				   PLC.gc("GOTO",null,null,d.v(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$10 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.gc("LABEL",null,null,c.f(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Condicion ::= Condicion AND NT$9 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   PLC.gc("LABEL",null,null,c.f(not));
				   PLC.gc("GOTO",null,null,d.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.gc("LABEL",null,null,c.v(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Condicion ::= NOT NT$8 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 not=false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$8 ::= 
            {
              EtiquetaDoble RESULT =null;
 not=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Condicion ::= Expresion GE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLC.gc("IFLT",e2,e1,RESULT.v(not));
					PLC.gc("IFEQ",e1,e2,RESULT.v(not));
					PLC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Condicion ::= Expresion GT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLC.gc("IFLT",e2,e1,RESULT.v(not));
					PLC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Condicion ::= Expresion LE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLC.gc("IFLT",e1,e2,RESULT.v(not));
					PLC.gc("IFEQ",e1,e2,RESULT.v(not));
					PLC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Condicion ::= Expresion LT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLC.gc("IFLT",e1,e2,RESULT.v(not));
					PLC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Condicion ::= Expresion NEQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					String v="", f="";
					PLC.gc("IFEQ",e1,e2,RESULT.f(not));
					PLC.gc("GOTO",null,null,RESULT.v(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Condicion ::= Expresion EQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLC.gc("IFEQ",e1,e2,RESULT.v(not));
					PLC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expresion ::= IDENT IGUAL Expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PLC.gc("ASIG",expr,null,id); RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLC.gc("MENOS","0",exp,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expresion ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLC.gc("DIV",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expresion ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLC.gc("POR",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLC.gc("MENOS",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLC.gc("MAS",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parteELSE ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parteELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AWhile ::= WHILE 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AWhile",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ADo ::= DO 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ADo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Apyc ::= PYC 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Apyc",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Sentencia ::= AL Lista_de_sent CL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PLC.gc("PRINT",expr,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia ::= FOR AP Expresion Apyc NT$5 Condicion Apyc NT$6 Expresion CP NT$7 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pyc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pyc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		EtiquetaDoble pyc1 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pyc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pyc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble pyc2 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 PLC.gc("GOTO",null,null,pyc2.v(false));
				   PLC.gc("LABEL",null,null,c.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pyc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pyc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble pyc1 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pyc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pyc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble pyc2 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLC.gc("GOTO",null,null,pyc1.v(false));
				   PLC.gc("LABEL",null,null,c.v(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pyc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pyc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble pyc1 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pyc2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pyc2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble pyc2 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.gc("LABEL",null,null,pyc2.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$5 ::= 
            {
              Object RESULT =null;
		int pyc1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pyc1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble pyc1 = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.gc("LABEL",null,null,pyc1.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= ADo NT$4 Sentencia WHILE AP Condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		EtiquetaDoble ado = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PLC.gc("LABEL",null,null,c.v(not));
				   PLC.gc("GOTO",null,null,ado.v(false));
				   PLC.gc("LABEL",null,null,c.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$4 ::= 
            {
              Object RESULT =null;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble ado = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.gc("LABEL",null,null,ado.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia ::= AWhile NT$2 AP Condicion CP NT$3 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble awhile = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLC.gc("GOTO",null,null,awhile.v(false));
				   PLC.gc("LABEL",null,null,c.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EtiquetaDoble awhile = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLC.gc("LABEL",null,null,c.v(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT =null;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble awhile = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.gc("LABEL",null,null,awhile.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= IF AP Condicion NT$0 CP Sentencia NT$1 parteELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLC.gc("LABEL",null,null,cond.f(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLC.gc("LABEL",null,null,cond.v(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= Lista_de_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

