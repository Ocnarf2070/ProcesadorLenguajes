
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 08 03:02:23 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 08 03:02:23 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\004\002\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\023\002\000\002\005\006\000" +
    "\002\006\004\000\002\006\004\000\002\024\002\000\002" +
    "\025\002\000\002\006\012\000\002\026\002\000\002\027" +
    "\002\000\002\006\011\000\002\030\002\000\002\006\012" +
    "\000\002\031\002\000\002\032\002\000\002\033\002\000" +
    "\002\006\016\000\002\034\002\000\002\035\002\000\002" +
    "\006\013\000\002\006\007\000\002\016\004\000\002\036" +
    "\002\000\002\016\006\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\011\003\000\002\012\003\000" +
    "\002\013\003\000\002\021\002\000\002\021\004\000\002" +
    "\007\002\000\002\007\004\000\002\015\005\000\002\015" +
    "\003\000\002\022\003\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\004\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\014\004\000\002\014\004\000\002\014" +
    "\004\000\002\014\004\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\037\002\000\002\010\005\000\002" +
    "\040\002\000\002\010\006\000\002\041\002\000\002\010" +
    "\006\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\040\002\ufffe\003\004\004\ufffe\005\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\015\ufffe\017\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\030\ufffe\046\ufffe\047\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\207\001\002\000\036\002\001" +
    "\004\012\005\017\007\022\010\014\011\035\015\026\017" +
    "\007\024\010\025\027\026\020\030\024\046\033\047\011" +
    "\001\002\000\016\017\007\024\010\025\027\026\020\046" +
    "\033\047\011\001\002\000\004\047\011\001\002\000\060" +
    "\007\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\001\002\000\004\047\uffe3" +
    "\001\002\000\004\026\ufff3\001\002\000\004\026\uffdf\001" +
    "\002\000\016\016\043\017\044\020\046\021\045\023\042" +
    "\033\176\001\002\000\004\047\011\001\002\000\004\026" +
    "\164\001\002\000\016\017\007\024\010\025\027\026\020" +
    "\046\033\047\011\001\002\000\006\033\157\034\156\001" +
    "\002\000\034\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\015\uffe0\017\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\046" +
    "\uffe0\047\uffe0\001\002\000\052\007\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6\027" +
    "\uffd6\033\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000\036\004" +
    "\ufffa\005\ufffa\007\ufffa\010\ufffa\011\ufffa\015\ufffa\017\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa\046\ufffa\047" +
    "\ufffa\001\002\000\040\002\ufffd\004\ufffd\005\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\015\ufffd\017\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\030\ufffd\031\ufffd\046\ufffd\047\ufffd\001\002\000\004" +
    "\026\147\001\002\000\004\047\011\001\002\000\034\004" +
    "\ufff0\005\ufff0\007\ufff0\010\ufff0\011\ufff0\015\ufff0\017\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\030\ufff0\046\ufff0\047\ufff0\001" +
    "\002\000\060\007\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\135\025\133\027" +
    "\uffd8\032\134\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\001\002\000" +
    "\016\017\007\024\010\025\027\026\040\046\033\047\011" +
    "\001\002\000\052\007\uffce\012\uffce\013\uffce\014\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\023\uffce\027\uffce\033\uffce" +
    "\034\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\001\002\000\042\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\015\ufffb\017" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\046\ufffb" +
    "\047\ufffb\001\002\000\016\017\uffde\024\uffde\025\uffde\026" +
    "\uffde\046\uffde\047\uffde\001\002\000\042\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\015\ufffc\017" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\046\ufffc" +
    "\047\ufffc\001\002\000\020\012\120\013\122\016\043\017" +
    "\044\020\046\021\045\023\042\001\002\000\016\017\007" +
    "\024\010\025\027\026\020\046\033\047\011\001\002\000" +
    "\020\016\043\017\044\020\046\021\045\023\042\027\047" +
    "\033\050\001\002\000\016\017\007\024\010\025\027\026" +
    "\020\046\033\047\011\001\002\000\016\017\007\024\010" +
    "\025\027\026\020\046\033\047\011\001\002\000\016\017" +
    "\007\024\010\025\027\026\020\046\033\047\011\001\002" +
    "\000\016\017\007\024\010\025\027\026\020\046\033\047" +
    "\011\001\002\000\016\017\007\024\010\025\027\026\020" +
    "\046\033\047\011\001\002\000\052\007\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\027\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\001\002\000\020" +
    "\017\uffee\024\uffee\025\uffee\026\uffee\035\uffee\046\uffee\047" +
    "\uffee\001\002\000\020\017\007\024\010\025\027\026\055" +
    "\035\053\046\033\047\011\001\002\000\030\016\043\017" +
    "\044\020\046\021\045\023\042\036\071\037\070\040\072" +
    "\041\067\042\074\043\073\001\002\000\020\017\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\035\uffc3\046\uffc3\047\uffc3\001\002" +
    "\000\010\033\103\044\060\045\061\001\002\000\020\017" +
    "\007\024\010\025\027\026\055\035\053\046\033\047\011" +
    "\001\002\000\032\016\043\017\044\020\046\021\045\023" +
    "\042\027\047\036\071\037\070\040\072\041\067\042\074" +
    "\043\073\001\002\000\010\027\062\044\060\045\061\001" +
    "\002\000\020\017\uffc1\024\uffc1\025\uffc1\026\uffc1\035\uffc1" +
    "\046\uffc1\047\uffc1\001\002\000\020\017\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\035\uffbf\046\uffbf\047\uffbf\001\002\000\012" +
    "\027\uffbd\033\uffbd\044\uffbd\045\uffbd\001\002\000\020\017" +
    "\007\024\010\025\027\026\055\035\053\046\033\047\011" +
    "\001\002\000\012\027\uffbe\033\uffbe\044\060\045\061\001" +
    "\002\000\020\017\007\024\010\025\027\026\055\035\053" +
    "\046\033\047\011\001\002\000\012\027\uffc0\033\uffc0\044" +
    "\060\045\uffc0\001\002\000\016\017\007\024\010\025\027" +
    "\026\020\046\033\047\011\001\002\000\016\017\007\024" +
    "\010\025\027\026\020\046\033\047\011\001\002\000\016" +
    "\017\007\024\010\025\027\026\020\046\033\047\011\001" +
    "\002\000\016\017\007\024\010\025\027\026\020\046\033" +
    "\047\011\001\002\000\016\017\007\024\010\025\027\026" +
    "\020\046\033\047\011\001\002\000\016\017\007\024\010" +
    "\025\027\026\020\046\033\047\011\001\002\000\024\016" +
    "\043\017\044\020\046\021\045\023\042\027\uffc7\033\uffc7" +
    "\044\uffc7\045\uffc7\001\002\000\024\016\043\017\044\020" +
    "\046\021\045\023\042\027\uffc5\033\uffc5\044\uffc5\045\uffc5" +
    "\001\002\000\024\016\043\017\044\020\046\021\045\023" +
    "\042\027\uffc6\033\uffc6\044\uffc6\045\uffc6\001\002\000\024" +
    "\016\043\017\044\020\046\021\045\023\042\027\uffc9\033" +
    "\uffc9\044\uffc9\045\uffc9\001\002\000\024\016\043\017\044" +
    "\020\046\021\045\023\042\027\uffc8\033\uffc8\044\uffc8\045" +
    "\uffc8\001\002\000\024\016\043\017\044\020\046\021\045" +
    "\023\042\027\uffc4\033\uffc4\044\uffc4\045\uffc4\001\002\000" +
    "\016\017\uffed\024\uffed\025\uffed\026\uffed\046\uffed\047\uffed" +
    "\001\002\000\016\017\007\024\010\025\027\026\020\046" +
    "\033\047\011\001\002\000\016\016\043\017\044\020\046" +
    "\021\045\023\042\027\106\001\002\000\034\004\uffec\005" +
    "\uffec\007\uffec\010\uffec\011\uffec\015\uffec\017\uffec\024\uffec" +
    "\025\uffec\026\uffec\030\uffec\046\uffec\047\uffec\001\002\000" +
    "\034\004\012\005\017\007\022\010\014\011\035\015\026" +
    "\017\007\024\010\025\027\026\020\030\024\046\033\047" +
    "\011\001\002\000\042\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\007\uffeb\010\uffeb\011\uffeb\015\uffeb\017\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\030\uffeb\031\uffeb\046\uffeb\047\uffeb\001\002" +
    "\000\020\017\007\024\010\025\027\026\055\035\053\046" +
    "\033\047\011\001\002\000\012\027\uffc2\033\uffc2\044\060" +
    "\045\061\001\002\000\052\007\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3\027\uffd3" +
    "\033\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\001\002\000\052\007\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\023\uffd2\027\uffd2\033\uffd2\034\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\001" +
    "\002\000\052\007\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4" +
    "\017\uffd4\020\046\021\045\023\042\027\uffd4\033\uffd4\034" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\001\002\000\052\007\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\016\uffd5\017\uffd5\020\046\021\045\023\042" +
    "\027\uffd5\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002\000\052" +
    "\007\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\023\uffd0\027\uffd0\033\uffd0\034\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\001\002\000\016\017\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\046\uffe2\047\uffe2\001\002\000\016\017\007\024\010\025" +
    "\027\026\020\046\033\047\011\001\002\000\016\017\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\046\uffe1\047\uffe1\001\002\000" +
    "\020\007\uffea\014\uffea\016\043\017\044\020\046\021\045" +
    "\023\042\001\002\000\006\007\uffdd\014\125\001\002\000" +
    "\016\017\007\024\010\025\027\026\020\046\033\047\011" +
    "\001\002\000\004\007\uffe9\001\002\000\004\007\130\001" +
    "\002\000\034\004\012\005\017\007\022\010\014\011\035" +
    "\015\026\017\007\024\010\025\027\026\020\030\024\046" +
    "\033\047\011\001\002\000\042\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\015\uffe8\017\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\030\uffe8\031\uffe8\046\uffe8\047\uffe8" +
    "\001\002\000\016\007\uffdc\016\043\017\044\020\046\021" +
    "\045\023\042\001\002\000\052\007\uffca\012\uffca\013\uffca" +
    "\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca\027" +
    "\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\001\002\000\016\017" +
    "\007\024\010\025\027\026\020\046\033\047\011\001\002" +
    "\000\052\007\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\023\uffcd\027\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\001\002\000\052\007\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\016\043\017\044\020\046\021\045\023\042\027" +
    "\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\001\002\000\034\004" +
    "\012\005\017\007\022\010\014\011\035\015\026\017\007" +
    "\024\010\025\027\026\020\030\024\046\033\047\011\001" +
    "\002\000\004\010\141\001\002\000\004\026\142\001\002" +
    "\000\020\017\007\024\010\025\027\026\055\035\053\046" +
    "\033\047\011\001\002\000\010\027\144\044\060\045\061" +
    "\001\002\000\004\033\145\001\002\000\042\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\015\uffef" +
    "\017\uffef\024\uffef\025\uffef\026\uffef\030\uffef\031\uffef\046" +
    "\uffef\047\uffef\001\002\000\052\007\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\027" +
    "\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000\016\017" +
    "\007\024\010\025\027\026\020\046\033\047\011\001\002" +
    "\000\016\016\043\017\044\020\046\021\045\023\042\027" +
    "\151\001\002\000\004\033\152\001\002\000\042\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\015" +
    "\uffe7\017\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7" +
    "\046\uffe7\047\uffe7\001\002\000\036\004\ufffe\005\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\015\ufffe\017\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\030\ufffe\031\ufffe\046\ufffe\047\ufffe\001\002\000" +
    "\036\004\012\005\017\007\022\010\014\011\035\015\026" +
    "\017\007\024\010\025\027\026\020\030\024\031\155\046" +
    "\033\047\011\001\002\000\042\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9\017\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\046\ufff9\047\ufff9" +
    "\001\002\000\004\047\uffe5\001\002\000\042\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\015\ufff8" +
    "\017\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031\ufff8\046" +
    "\ufff8\047\ufff8\001\002\000\004\047\011\001\002\000\006" +
    "\033\uffe4\034\uffe4\001\002\000\010\032\134\033\uffd8\034" +
    "\uffd8\001\002\000\016\016\043\017\044\020\046\021\045" +
    "\023\042\027\047\001\002\000\020\017\007\024\010\025" +
    "\027\026\055\035\053\046\033\047\011\001\002\000\010" +
    "\027\ufff6\044\060\045\061\001\002\000\004\027\167\001" +
    "\002\000\034\004\012\005\017\007\022\010\014\011\035" +
    "\015\026\017\007\024\010\025\027\026\020\030\024\046" +
    "\033\047\011\001\002\000\042\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\015\ufff5\017\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5\046\ufff5\047\ufff5" +
    "\001\002\000\042\002\uffdb\004\uffdb\005\uffdb\006\173\007" +
    "\uffdb\010\uffdb\011\uffdb\015\uffdb\017\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\030\uffdb\031\uffdb\046\uffdb\047\uffdb\001\002\000" +
    "\042\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\015\ufff4\017\ufff4\024\ufff4\025\ufff4\026\ufff4\030" +
    "\ufff4\031\ufff4\046\ufff4\047\ufff4\001\002\000\034\004\012" +
    "\005\017\007\022\010\014\011\035\015\026\017\007\024" +
    "\010\025\027\026\020\030\024\046\033\047\011\001\002" +
    "\000\042\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\011\uffda\015\uffda\017\uffda\024\uffda\025\uffda\026\uffda" +
    "\030\uffda\031\uffda\046\uffda\047\uffda\001\002\000\006\033" +
    "\uffe6\034\uffe6\001\002\000\042\002\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\015\ufff7\017\ufff7\024" +
    "\ufff7\025\ufff7\026\ufff7\030\ufff7\031\ufff7\046\ufff7\047\ufff7" +
    "\001\002\000\004\026\200\001\002\000\020\017\007\024" +
    "\010\025\027\026\055\035\053\046\033\047\011\001\002" +
    "\000\010\027\202\044\060\045\061\001\002\000\034\004" +
    "\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2\015\ufff2\017\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\030\ufff2\046\ufff2\047\ufff2\001" +
    "\002\000\034\004\012\005\017\007\022\010\014\011\035" +
    "\015\026\017\007\024\010\025\027\026\020\030\024\046" +
    "\033\047\011\001\002\000\042\002\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\015\ufff1\017\ufff1\024" +
    "\ufff1\025\ufff1\026\ufff1\030\ufff1\031\ufff1\046\ufff1\047\ufff1" +
    "\001\002\000\052\007\uffcc\012\uffcc\013\uffcc\014\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\027\uffcc\033\uffcc" +
    "\034\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\001\002\000\052\007\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023" +
    "\uffd1\027\uffd1\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\024\005\033\006\035" +
    "\011\027\012\012\013\031\014\014\015\022\016\020\017" +
    "\015\022\030\001\001\000\010\014\205\015\022\022\030" +
    "\001\001\000\004\022\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\174\022\161\001\001\000" +
    "\002\001\001\000\010\014\162\015\022\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\145\001\001\000\004\030\136\001\001\000" +
    "\002\001\001\000\010\014\036\015\022\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\120\001\001\000\010\014\040" +
    "\015\022\022\030\001\001\000\002\001\001\000\010\014" +
    "\116\015\022\022\030\001\001\000\010\014\115\015\022" +
    "\022\030\001\001\000\010\014\114\015\022\022\030\001" +
    "\001\000\010\014\113\015\022\022\030\001\001\000\010" +
    "\014\112\015\022\022\030\001\001\000\002\001\001\000" +
    "\004\031\050\001\001\000\012\010\053\014\051\015\022" +
    "\022\030\001\001\000\002\001\001\000\004\037\110\001" +
    "\001\000\002\001\001\000\012\010\056\014\055\015\022" +
    "\022\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\064\001\001\000\004\041\062\001\001\000\002" +
    "\001\001\000\012\010\063\014\051\015\022\022\030\001" +
    "\001\000\002\001\001\000\012\010\065\014\051\015\022" +
    "\022\030\001\001\000\002\001\001\000\010\014\101\015" +
    "\022\022\030\001\001\000\010\014\100\015\022\022\030" +
    "\001\001\000\010\014\077\015\022\022\030\001\001\000" +
    "\010\014\076\015\022\022\030\001\001\000\010\014\075" +
    "\015\022\022\030\001\001\000\010\014\074\015\022\022" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\103\001\001\000\010\014\104\015\022" +
    "\022\030\001\001\000\002\001\001\000\004\033\106\001" +
    "\001\000\030\003\107\005\033\006\035\011\027\012\012" +
    "\013\031\014\014\015\022\016\020\017\015\022\030\001" +
    "\001\000\002\001\001\000\012\010\111\014\051\015\022" +
    "\022\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\122\015\022\022" +
    "\030\001\001\000\002\001\001\000\004\034\123\001\001" +
    "\000\004\021\125\001\001\000\010\014\131\015\022\022" +
    "\030\001\001\000\004\035\126\001\001\000\002\001\001" +
    "\000\030\003\130\005\033\006\035\011\027\012\012\013" +
    "\031\014\014\015\022\016\020\017\015\022\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\135\015\022\022\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\137\005\033\006\035\011" +
    "\027\012\012\013\031\014\014\015\022\016\020\017\015" +
    "\022\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\142\014\051\015\022\022\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\147\015\022\022\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\153\001\001\000\030\003\024\005\033\006\035\011\027" +
    "\012\012\013\031\014\014\015\022\016\020\017\015\022" +
    "\030\001\001\000\002\001\001\000\004\036\157\001\001" +
    "\000\002\001\001\000\006\015\160\022\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\164\014\051\015\022\022\030\001\001\000\004\024" +
    "\165\001\001\000\002\001\001\000\030\003\167\005\033" +
    "\006\035\011\027\012\012\013\031\014\014\015\022\016" +
    "\020\017\015\022\030\001\001\000\004\025\170\001\001" +
    "\000\004\007\171\001\001\000\002\001\001\000\030\003" +
    "\173\005\033\006\035\011\027\012\012\013\031\014\014" +
    "\015\022\016\020\017\015\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\200\014\051\015\022\022\030\001\001\000" +
    "\002\001\001\000\004\027\202\001\001\000\030\003\203" +
    "\005\033\006\035\011\027\012\012\013\031\014\014\015" +
    "\022\016\020\017\015\022\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	TablaDeSimbolos tb = new TablaDeSimbolos();
	TablaSimboloCont tbc = new TablaSimboloCont();
	private static int contador=0;
	private static String temporal(){
		String temporal = "t"+contador;
		contador++;
		return temporal;
	}
	private boolean not=false;
	private boolean normal=false;
	private boolean llaves=false;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= AP Condicion CP 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Condicion OR NT$14 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   PLXC.gc("LABEL",null,null,c.v(not)); 
				   PLXC.gc("GOTO",null,null,d.v(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$14 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.gc("LABEL",null,null,c.f(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Condicion AND NT$13 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   PLXC.gc("LABEL",null,null,c.f(not));
				   PLXC.gc("GOTO",null,null,d.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$13 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.gc("LABEL",null,null,c.v(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condicion ::= NOT NT$12 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 not=false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$12 ::= 
            {
              EtiquetaDoble RESULT =null;
 not=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Condicion ::= Expresion GE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLXC.gc("IFLT",e2,e1,RESULT.v(not));
					PLXC.gc("IFEQ",e1,e2,RESULT.v(not));
					PLXC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Condicion ::= Expresion GT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLXC.gc("IFLT",e2,e1,RESULT.v(not));
					PLXC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Condicion ::= Expresion LE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLXC.gc("IFLT",e1,e2,RESULT.v(not));
					PLXC.gc("IFEQ",e1,e2,RESULT.v(not));
					PLXC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condicion ::= Expresion LT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLXC.gc("IFLT",e1,e2,RESULT.v(not));
					PLXC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicion ::= Expresion NEQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					String v="", f="";
					PLXC.gc("IFEQ",e1,e2,RESULT.f(not));
					PLXC.gc("GOTO",null,null,RESULT.v(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Condicion ::= Expresion EQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new EtiquetaDoble(2);
					PLXC.gc("IFEQ",e1,e2,RESULT.v(not));
					PLXC.gc("GOTO",null,null,RESULT.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= Variable DMENOS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				RESULT = temporal();
				PLXC.gc("ASIG",id,null,RESULT);
				PLXC.gc("MENOS",id,"1",id);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= DMENOS Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				RESULT = id;
				PLXC.gc("MENOS",id,"1",id);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= DMAS Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				RESULT = id;
				PLXC.gc("MAS",id,"1",id);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Variable DMAS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				RESULT = temporal();
				PLXC.gc("ASIG",id,null,RESULT);
				PLXC.gc("MAS",id,"1",id);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String tn=temporal();
				   PLXC.gc("DIV",exp1,exp2,tn);
				   String tn2=temporal();
				   PLXC.gc("POR",tn,exp2,tn2);
				   RESULT = temporal();
				   PLXC.gc("MENOS",exp1,tn2,RESULT);				   				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLXC.gc("MENOS","0",exp,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLXC.gc("DIV",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLXC.gc("POR",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLXC.gc("MENOS",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = temporal();
					PLXC.gc("MAS",exp1,exp2,RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= ExpresionAsig 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Variable ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String num = "";
		 if(!normal){
			 Simbolo sb = tb.search(id);
			 if(sb==null){
				 PLXC.gc("ERROR",null,null,null);
			 }
			 if(tbc.search(id)<=1)num=id;
			 else {
				 num=id+"_"+Integer.toString(tbc.search(id)-1);
			 }
		 }else{
			 tbc.addOrUpdate(id, true);
			 if(tbc.search(id)<1)num=id;
			 else {
				 num=id+"_"+Integer.toString(tbc.search(id)-1);

			 }
		 }
		 RESULT=num;

		 CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionAsig ::= Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsig",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpresionAsig ::= Variable IGUAL Expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 PLXC.gc("ASIG",expr,null,id); RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsig",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parteELSE ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parteELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Pasos ::= STEP Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pasos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Pasos ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pasos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AFor ::= FOR 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AWhile ::= WHILE 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AWhile",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ADo ::= DO 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ADo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Modo ::= DOWNTO 
            {
              Tuple2<Boolean,EtiquetaDoble> RESULT =null;
		
		RESULT = new Tuple2(false,new EtiquetaDoble(2));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Modo ::= TO 
            {
              Tuple2<Boolean,EtiquetaDoble> RESULT =null;
		
		RESULT = new Tuple2(true,new EtiquetaDoble(2));
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 normal=true; RESULT=new Tipo(Tipo.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // List_declar_var ::= List_declar_var COMA NT$11 ExpresionAsig 
            {
              Tipo RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Tipo) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(tb.search(id)==null){
					RESULT = type;
					tb.add(id,type);
					}
					else PLXC.gc("ERROR",null,null,null);
					normal=false;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$11 ::= 
            {
              Tipo RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 normal=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // List_declar_var ::= Tipo ExpresionAsig 
            {
              Tipo RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo type = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = type;
					tb.add(id,type);
					normal=false;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencia_simp ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PLXC.gc("PRINT",expr,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia_simp ::= AFor Expresion Modo Expresion NT$9 Pasos NT$10 DO Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tuple2<Boolean,EtiquetaDoble> m = (Tuple2<Boolean,EtiquetaDoble>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				PLXC.gc("GOTO",null,null,f.f(false));
				PLXC.gc("LABEL",null,null,m._2().f(false) );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tuple2<Boolean,EtiquetaDoble> m = (Tuple2<Boolean,EtiquetaDoble>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				String paso = num==null?"1":num;
				if(m._1())PLXC.gc("MAS",exp1,paso,exp1);
				else PLXC.gc("MENOS",exp1,paso,exp1);
				PLXC.gc("GOTO",null,null,f.v(false));
				PLXC.gc("LABEL",null,null,m._2().v(false));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tuple2<Boolean,EtiquetaDoble> m = (Tuple2<Boolean,EtiquetaDoble>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				PLXC.gc("LABEL",null,null,f.v(false));
				if(m._1()) PLXC.gc("IFLT",exp2,exp1,m._2().f(false));
				else PLXC.gc("IFLT",exp1,exp2,m._2().f(false));
				PLXC.gc("GOTO",null,null,m._2().v(false));
				PLXC.gc("LABEL",null,null,f.f(false));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia_simp ::= AFor AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion CP NT$8 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 PLXC.gc("GOTO",null,null,f.f(false));
				   PLXC.gc("LABEL",null,null,c.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 PLXC.gc("GOTO",null,null,f.v(false));
				   PLXC.gc("LABEL",null,null,c.v(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.gc("LABEL",null,null,f.f(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLXC.gc("LABEL",null,null,f.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia_simp ::= ADo NT$5 Sentencia WHILE AP Condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		EtiquetaDoble ado = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 PLXC.gc("LABEL",null,null,c.v(not));
				   PLXC.gc("GOTO",null,null,ado.v(false));
				   PLXC.gc("LABEL",null,null,c.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble ado = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.gc("LABEL",null,null,ado.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia_simp ::= AWhile NT$3 AP Condicion CP NT$4 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble awhile = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 PLXC.gc("GOTO",null,null,awhile.v(false));
				   PLXC.gc("LABEL",null,null,c.f(not));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EtiquetaDoble awhile = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 PLXC.gc("LABEL",null,null,c.v(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble awhile = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.gc("LABEL",null,null,awhile.v(false)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia_simp ::= IF AP Condicion NT$1 CP Sentencia NT$2 parteELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 PLXC.gc("LABEL",null,null,cond.f(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 PLXC.gc("LABEL",null,null,cond.v(not)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia_simp ::= Expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia_simp ::= List_declar_var PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia_comp ::= AL NT$0 Lista_de_sent CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					Set<String> set=tb.lexemas();
					for(String sb: set)tbc.addOrUpdate(sb,false);
					tb.FinBloque();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 tb.NuevoBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Sentencia_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Sentencia_simp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= error 
            {
              Object RESULT =null;
		 PLXC.gc("ERROR",null,null,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_de_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

