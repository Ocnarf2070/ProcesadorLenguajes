
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 09 11:09:49 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 09 11:09:49 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\013\002\000\002\014\002\000\002\004\012\000" +
    "\002\015\002\000\002\016\002\000\002\004\011\000\002" +
    "\017\002\000\002\020\002\000\002\004\013\000\002\021" +
    "\002\000\002\022\002\000\002\023\002\000\002\004\016" +
    "\000\002\024\002\000\002\025\002\000\002\026\002\000" +
    "\002\004\014\000\002\027\002\000\002\030\002\000\002" +
    "\031\002\000\002\004\014\000\002\004\007\000\002\032" +
    "\002\000\002\004\006\000\002\004\005\000\002\012\004" +
    "\000\002\012\002\000\002\007\003\000\002\007\005\000" +
    "\002\010\005\000\002\010\003\000\002\005\004\000\002" +
    "\005\002\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\005\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\004\000" +
    "\002\033\002\000\002\006\006\000\002\034\002\000\002" +
    "\006\006\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\040\003\021\004\006\012\016\015\013\017" +
    "\012\021\020\022\015\023\010\027\025\030\017\031\007" +
    "\033\004\050\022\051\024\052\005\001\002\000\020\015" +
    "\013\030\017\031\007\033\004\050\022\051\024\052\005" +
    "\001\002\000\060\007\uffce\010\uffce\011\uffce\014\207\016" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\uffce\030\206\031\205" +
    "\032\uffce\033\uffce\035\uffce\036\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\001\002" +
    "\000\004\052\176\001\002\000\004\052\174\001\002\000" +
    "\004\015\166\001\002\000\016\007\165\011\036\032\032" +
    "\033\034\035\035\036\031\001\002\000\004\015\154\001" +
    "\002\000\020\015\013\030\017\031\007\033\004\050\022" +
    "\051\024\052\005\001\002\000\004\002\152\001\002\000" +
    "\036\004\ufff5\012\ufff5\015\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\001\002\000\036\004\uffe5\012\uffe5\015\uffe5" +
    "\017\uffe5\021\uffe5\022\uffe5\023\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\050\uffe5\051\uffe5\052\uffe5\001\002\000\004" +
    "\052\136\001\002\000\004\015\132\001\002\000\004\002" +
    "\uffff\001\002\000\052\007\uffcd\010\uffcd\011\uffcd\016\uffcd" +
    "\022\uffcd\024\uffcd\025\uffcd\026\uffcd\032\uffcd\033\uffcd\035" +
    "\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\047\uffcd\001\002\000\040\002\001\004" +
    "\006\012\016\015\013\017\012\021\020\022\015\023\010" +
    "\027\025\030\017\031\007\033\004\050\022\051\024\052" +
    "\005\001\002\000\052\007\uffcc\010\uffcc\011\uffcc\016\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\032\uffcc\033\uffcc\035" +
    "\uffcc\036\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\001\002\000\020\015\027\030" +
    "\017\031\007\033\004\050\022\051\024\052\005\001\002" +
    "\000\042\002\ufffe\004\ufffe\012\ufffe\013\ufffe\015\ufffe\017" +
    "\ufffe\021\ufffe\022\ufffe\023\ufffe\027\ufffe\030\ufffe\031\ufffe" +
    "\033\ufffe\050\ufffe\051\ufffe\052\ufffe\001\002\000\020\015" +
    "\013\030\017\031\007\033\004\050\022\051\024\052\005" +
    "\001\002\000\020\011\036\024\uffee\026\uffea\032\032\033" +
    "\034\035\035\036\031\001\002\000\020\015\013\030\017" +
    "\031\007\033\004\050\022\051\024\052\005\001\002\000" +
    "\020\015\013\030\017\031\007\033\004\050\022\051\024" +
    "\052\005\001\002\000\004\024\054\001\002\000\020\015" +
    "\013\030\017\031\007\033\004\050\022\051\024\052\005" +
    "\001\002\000\020\015\013\030\017\031\007\033\004\050" +
    "\022\051\024\052\005\001\002\000\020\015\013\030\017" +
    "\031\007\033\004\050\022\051\024\052\005\001\002\000" +
    "\004\026\040\001\002\000\020\015\013\030\017\031\007" +
    "\033\004\050\022\051\024\052\005\001\002\000\020\011" +
    "\036\022\uffe9\025\uffe9\032\032\033\034\035\035\036\031" +
    "\001\002\000\006\022\uffe1\025\043\001\002\000\020\015" +
    "\013\030\017\031\007\033\004\050\022\051\024\052\005" +
    "\001\002\000\004\022\045\001\002\000\036\004\uffe8\012" +
    "\uffe8\015\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\050\uffe8\051\uffe8\052\uffe8\001" +
    "\002\000\036\004\006\012\016\015\013\017\012\021\020" +
    "\022\015\023\010\027\025\030\017\031\007\033\004\050" +
    "\022\051\024\052\005\001\002\000\044\002\uffe7\004\uffe7" +
    "\012\uffe7\013\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\001\002\000\016\011\036\022\uffe2\032" +
    "\032\033\034\035\035\036\031\001\002\000\052\007\uffd8" +
    "\010\uffd8\011\uffd8\016\uffd8\022\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8\001" +
    "\002\000\052\007\uffd7\010\uffd7\011\uffd7\016\uffd7\022\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\032\uffd7\033\uffd7\035\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\001\002\000\052\007\uffd9\010\uffd9\011" +
    "\036\016\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\032\uffd9" +
    "\033\uffd9\035\035\036\031\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002\000\020" +
    "\015\013\030\017\031\007\033\004\050\022\051\024\052" +
    "\005\001\002\000\020\011\036\022\uffed\025\uffed\032\032" +
    "\033\034\035\035\036\031\001\002\000\006\022\uffe1\025" +
    "\043\001\002\000\004\022\060\001\002\000\036\004\uffec" +
    "\012\uffec\015\uffec\017\uffec\021\uffec\022\uffec\023\uffec\027" +
    "\uffec\030\uffec\031\uffec\033\uffec\050\uffec\051\uffec\052\uffec" +
    "\001\002\000\036\004\006\012\016\015\013\017\012\021" +
    "\020\022\015\023\010\027\025\030\017\031\007\033\004" +
    "\050\022\051\024\052\005\001\002\000\044\002\uffeb\004" +
    "\uffeb\012\uffeb\013\uffeb\015\uffeb\017\uffeb\020\uffeb\021\uffeb" +
    "\022\uffeb\023\uffeb\027\uffeb\030\uffeb\031\uffeb\033\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\001\002\000\052\007\uffda\010\uffda" +
    "\011\036\016\uffda\022\uffda\024\uffda\025\uffda\026\uffda\032" +
    "\uffda\033\uffda\035\035\036\031\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\001\002\000" +
    "\052\007\uffd6\010\uffd6\011\uffd6\016\uffd6\022\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\001\002\000\020\007\067\011\036\016\066\032" +
    "\032\033\034\035\035\036\031\001\002\000\052\007\uffd4" +
    "\010\uffd4\011\uffd4\016\uffd4\022\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\001" +
    "\002\000\022\015\ufff2\030\ufff2\031\ufff2\033\ufff2\034\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\001\002\000\022\015\074\030" +
    "\017\031\007\033\004\034\073\050\022\051\024\052\005" +
    "\001\002\000\030\011\036\032\032\033\034\035\035\036" +
    "\031\040\107\041\112\042\113\043\106\044\111\045\110" +
    "\001\002\000\010\007\123\046\077\047\100\001\002\000" +
    "\022\015\074\030\017\031\007\033\004\034\073\050\022" +
    "\051\024\052\005\001\002\000\022\015\074\030\017\031" +
    "\007\033\004\034\073\050\022\051\024\052\005\001\002" +
    "\000\032\011\036\016\066\032\032\033\034\035\035\036" +
    "\031\040\107\041\112\042\113\043\106\044\111\045\110" +
    "\001\002\000\010\016\101\046\077\047\100\001\002\000" +
    "\022\015\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\050\uffc4" +
    "\051\uffc4\052\uffc4\001\002\000\022\015\uffc2\030\uffc2\031" +
    "\uffc2\033\uffc2\034\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002" +
    "\000\012\007\uffc0\016\uffc0\046\uffc0\047\uffc0\001\002\000" +
    "\022\015\074\030\017\031\007\033\004\034\073\050\022" +
    "\051\024\052\005\001\002\000\012\007\uffc1\016\uffc1\046" +
    "\uffc1\047\uffc1\001\002\000\022\015\074\030\017\031\007" +
    "\033\004\034\073\050\022\051\024\052\005\001\002\000" +
    "\012\007\uffc3\016\uffc3\046\uffc3\047\uffc3\001\002\000\020" +
    "\015\013\030\017\031\007\033\004\050\022\051\024\052" +
    "\005\001\002\000\020\015\013\030\017\031\007\033\004" +
    "\050\022\051\024\052\005\001\002\000\020\015\013\030" +
    "\017\031\007\033\004\050\022\051\024\052\005\001\002" +
    "\000\020\015\013\030\017\031\007\033\004\050\022\051" +
    "\024\052\005\001\002\000\020\015\013\030\017\031\007" +
    "\033\004\050\022\051\024\052\005\001\002\000\020\015" +
    "\013\030\017\031\007\033\004\050\022\051\024\052\005" +
    "\001\002\000\024\007\uffc8\011\036\016\uffc8\032\032\033" +
    "\034\035\035\036\031\046\uffc8\047\uffc8\001\002\000\024" +
    "\007\uffc7\011\036\016\uffc7\032\032\033\034\035\035\036" +
    "\031\046\uffc7\047\uffc7\001\002\000\024\007\uffcb\011\036" +
    "\016\uffcb\032\032\033\034\035\035\036\031\046\uffcb\047" +
    "\uffcb\001\002\000\024\007\uffca\011\036\016\uffca\032\032" +
    "\033\034\035\035\036\031\046\uffca\047\uffca\001\002\000" +
    "\024\007\uffc9\011\036\016\uffc9\032\032\033\034\035\035" +
    "\036\031\046\uffc9\047\uffc9\001\002\000\024\007\uffc6\011" +
    "\036\016\uffc6\032\032\033\034\035\035\036\031\046\uffc6" +
    "\047\uffc6\001\002\000\012\007\uffc5\016\uffc5\046\uffc5\047" +
    "\uffc5\001\002\000\020\015\ufff1\030\ufff1\031\ufff1\033\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\001\002\000\020\015\013\030" +
    "\017\031\007\033\004\050\022\051\024\052\005\001\002" +
    "\000\016\011\036\016\126\032\032\033\034\035\035\036" +
    "\031\001\002\000\036\004\ufff0\012\ufff0\015\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\027\ufff0\030\ufff0\031\ufff0\033" +
    "\ufff0\050\ufff0\051\ufff0\052\ufff0\001\002\000\036\004\006" +
    "\012\016\015\013\017\012\021\020\022\015\023\010\027" +
    "\025\030\017\031\007\033\004\050\022\051\024\052\005" +
    "\001\002\000\044\002\uffef\004\uffef\012\uffef\013\uffef\015" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\027\uffef" +
    "\030\uffef\031\uffef\033\uffef\050\uffef\051\uffef\052\uffef\001" +
    "\002\000\042\002\ufffd\004\ufffd\012\ufffd\013\ufffd\015\ufffd" +
    "\017\ufffd\021\ufffd\022\ufffd\023\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\033\ufffd\050\ufffd\051\ufffd\052\ufffd\001\002\000\020" +
    "\015\013\030\017\031\007\033\004\050\022\051\024\052" +
    "\005\001\002\000\016\011\036\016\134\032\032\033\034" +
    "\035\035\036\031\001\002\000\004\007\135\001\002\000" +
    "\044\002\uffe6\004\uffe6\012\uffe6\013\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\023\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\033\uffe6\050\uffe6\051\uffe6\052\uffe6\001\002\000\052" +
    "\007\uffd3\010\uffd3\011\uffd3\016\uffd3\022\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\032\uffd3\033\uffd3\035\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\001\002\000\036\004\006\012\016\015\013\017\012" +
    "\021\020\022\015\023\010\027\025\030\017\031\007\033" +
    "\004\050\022\051\024\052\005\001\002\000\040\004\006" +
    "\012\016\013\141\015\013\017\012\021\020\022\015\023" +
    "\010\027\025\030\017\031\007\033\004\050\022\051\024" +
    "\052\005\001\002\000\044\002\uffe4\004\uffe4\012\uffe4\013" +
    "\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\033\uffe4\050\uffe4\051\uffe4\052" +
    "\uffe4\001\002\000\036\004\006\012\016\015\013\017\012" +
    "\021\020\022\015\023\010\027\025\030\017\031\007\033" +
    "\004\050\022\051\024\052\005\001\002\000\004\023\ufff4" +
    "\001\002\000\004\023\145\001\002\000\004\015\146\001" +
    "\002\000\022\015\074\030\017\031\007\033\004\034\073" +
    "\050\022\051\024\052\005\001\002\000\010\016\150\046" +
    "\077\047\100\001\002\000\004\007\151\001\002\000\044" +
    "\002\ufff3\004\ufff3\012\ufff3\013\ufff3\015\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\050\ufff3\051\ufff3\052\ufff3\001\002\000\004\002" +
    "\000\001\002\000\016\011\036\016\066\032\032\033\034" +
    "\035\035\036\031\001\002\000\022\015\074\030\017\031" +
    "\007\033\004\034\073\050\022\051\024\052\005\001\002" +
    "\000\010\016\156\046\077\047\100\001\002\000\036\004" +
    "\ufffb\012\ufffb\015\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\033\ufffb\050\ufffb\051\ufffb\052" +
    "\ufffb\001\002\000\036\004\006\012\016\015\013\017\012" +
    "\021\020\022\015\023\010\027\025\030\017\031\007\033" +
    "\004\050\022\051\024\052\005\001\002\000\044\002\ufffa" +
    "\004\ufffa\012\ufffa\013\ufffa\015\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\001\002\000\044\002\uffdb\004" +
    "\uffdb\012\uffdb\013\uffdb\015\uffdb\017\uffdb\020\163\021\uffdb" +
    "\022\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\050" +
    "\uffdb\051\uffdb\052\uffdb\001\002\000\044\002\ufff9\004\ufff9" +
    "\012\ufff9\013\ufff9\015\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\001\002\000\036\004\006\012\016\015" +
    "\013\017\012\021\020\022\015\023\010\027\025\030\017" +
    "\031\007\033\004\050\022\051\024\052\005\001\002\000" +
    "\044\002\uffdc\004\uffdc\012\uffdc\013\uffdc\015\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\033\uffdc\050\uffdc\051\uffdc\052\uffdc\001\002\000\044" +
    "\002\ufffc\004\ufffc\012\ufffc\013\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\021\ufffc\022\ufffc\023\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\033\ufffc\050\ufffc\051\ufffc\052\ufffc\001\002\000\022\015" +
    "\ufff8\030\ufff8\031\ufff8\033\ufff8\034\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\001\002\000\022\015\074\030\017\031\007\033" +
    "\004\034\073\050\022\051\024\052\005\001\002\000\010" +
    "\016\171\046\077\047\100\001\002\000\036\004\ufff7\012" +
    "\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\033\ufff7\050\ufff7\051\ufff7\052\ufff7\001" +
    "\002\000\036\004\006\012\016\015\013\017\012\021\020" +
    "\022\015\023\010\027\025\030\017\031\007\033\004\050" +
    "\022\051\024\052\005\001\002\000\044\002\ufff6\004\ufff6" +
    "\012\ufff6\013\ufff6\015\ufff6\017\ufff6\020\ufff6\021\ufff6\022" +
    "\ufff6\023\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\001\002\000\052\007\uffd1\010\uffd1\011" +
    "\uffd1\016\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\032\uffd1" +
    "\033\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\006" +
    "\007\203\010\202\001\002\000\010\007\uffdd\010\uffdd\014" +
    "\200\001\002\000\006\007\uffe0\010\uffe0\001\002\000\020" +
    "\015\013\030\017\031\007\033\004\050\022\051\024\052" +
    "\005\001\002\000\020\007\uffde\010\uffde\011\036\032\032" +
    "\033\034\035\035\036\031\001\002\000\004\052\176\001" +
    "\002\000\044\002\uffe3\004\uffe3\012\uffe3\013\uffe3\015\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\050\uffe3\051\uffe3\052\uffe3\001\002" +
    "\000\006\007\uffdf\010\uffdf\001\002\000\052\007\uffd0\010" +
    "\uffd0\011\uffd0\016\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\032\uffd0\033\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002" +
    "\000\052\007\uffd2\010\uffd2\011\uffd2\016\uffd2\022\uffd2\024" +
    "\uffd2\025\uffd2\026\uffd2\032\uffd2\033\uffd2\035\uffd2\036\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\001\002\000\020\015\013\030\017\031\007" +
    "\033\004\050\022\051\024\052\005\001\002\000\052\007" +
    "\uffcf\010\uffcf\011\036\016\uffcf\022\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\032\032\033\034\035\035\036\031\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\001\002\000\052\007\uffd5\010\uffd5\011\uffd5\016\uffd5\022" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\032\uffd5\033\uffd5\035\uffd5" +
    "\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\012\002\013\003\022\004\025\011\010\001" +
    "\001\000\004\011\210\001\001\000\002\001\001\000\006" +
    "\007\174\010\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\152" +
    "\001\001\000\002\001\001\000\004\017\141\001\001\000" +
    "\004\032\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\130\011" +
    "\010\001\001\000\002\001\001\000\004\011\027\001\001" +
    "\000\002\001\001\000\004\011\064\001\001\000\006\024" +
    "\032\027\036\001\001\000\004\011\063\001\001\000\004" +
    "\011\062\001\001\000\002\001\001\000\004\011\052\001" +
    "\001\000\004\011\051\001\001\000\004\011\050\001\001" +
    "\000\002\001\001\000\004\011\040\001\001\000\004\030" +
    "\041\001\001\000\004\012\043\001\001\000\004\011\047" +
    "\001\001\000\002\001\001\000\004\031\045\001\001\000" +
    "\006\004\046\011\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\054\001\001\000\004\025\055\001\001" +
    "\000\004\012\056\001\001\000\002\001\001\000\004\026" +
    "\060\001\001\000\006\004\061\011\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\067\001\001\000\006" +
    "\006\071\011\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\121\011\070\001\001\000\006\006\075" +
    "\011\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\103\001\001\000\004\034\101\001\001\000\002" +
    "\001\001\000\006\006\102\011\070\001\001\000\002\001" +
    "\001\000\006\006\104\011\070\001\001\000\002\001\001" +
    "\000\004\011\120\001\001\000\004\011\117\001\001\000" +
    "\004\011\116\001\001\000\004\011\115\001\001\000\004" +
    "\011\114\001\001\000\004\011\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\123\001\001\000\004\011\124\001\001\000\002" +
    "\001\001\000\004\023\126\001\001\000\006\004\127\011" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\137\004\025" +
    "\011\010\001\001\000\006\004\130\011\010\001\001\000" +
    "\002\001\001\000\006\004\142\011\010\001\001\000\004" +
    "\020\143\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\146\011\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\154\011\070\001\001\000\002\001\001" +
    "\000\004\013\156\001\001\000\006\004\157\011\010\001" +
    "\001\000\004\014\160\001\001\000\004\005\161\001\001" +
    "\000\002\001\001\000\006\004\163\011\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\166\001\001" +
    "\000\006\006\167\011\070\001\001\000\002\001\001\000" +
    "\004\016\171\001\001\000\006\004\172\011\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\200\001\001" +
    "\000\002\001\001\000\004\010\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\207\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= AP cond CP 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								RESULT = c;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= cond OR NT$17 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Generador.label(c1.getV());
								Generador.goTo(c2.getF());
								RESULT = c2;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$17 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(c1.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= cond AND NT$16 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Generador.label(c1.getF());
								Generador.goTo(c2.getV());
								RESULT = c2;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$16 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(c1.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= NOT cond 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								String temp = c.getV();
								c.setV(c.getF());
								c.setF(temp);
								RESULT = c;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cond ::= exp MAOQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MAOQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= exp MAQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MAQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= exp MEOQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MEOQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond ::= exp MEQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MEQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond ::= exp NEQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.NEQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond ::= exp EQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.EQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= NUMEROF 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = n.toString();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = n.toString();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								if(Var.exists(i)){
									RESULT = Var.getVar(i);
								}
								else{
									Generador.error();
									Generador.halt();
								}
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								if(Var.exists(i)){
									RESULT = Generador.assignment(Var.getVar(i), e1);
								}
								else{
									Generador.error();
									Generador.halt();
								}
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= IDENT MENOSMENOS 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								String temp = Generador.getTemp();
                                                                Generador.assignment(temp, Var.getVar(i1));
                                                                Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " - " + "1");
                                                                RESULT = temp;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= MENOSMENOS IDENT 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " - " + "1");
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= IDENT MASMAS 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								String temp = Generador.getTemp();
								Generador.assignment(temp, Var.getVar(i1));
								Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " + " + "1");
								RESULT = temp;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MASMAS IDENT 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " + " + "1");
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								RESULT = e1;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic("-" + e1);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								String t1 = Generador.arithmetic(e1 + " / " + e2);
								String t2 = Generador.arithmetic(t1 + " * " + e2);
								RESULT = Generador.arithmetic(e1 + " - " + t2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " / " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " * " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " - " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " + " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // elsePart ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePart",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // elsePart ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePart",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // dec ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								
									Var.addVar(i, Var.getLevel());
								
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // dec ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								
								Var.addVar(i, Var.getLevel());
								Generador.assignment(Var.getVar(i), e1);
								
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // listaDec ::= listaDec COMA dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // listaDec ::= dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stepPart ::= 
            {
              String RESULT =null;
		
								RESULT = "1";
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stepPart ::= STEP exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = e1;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent ::= INT listaDec PYC 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent ::= AL NT$15 listaSent CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
								Var.clear(Var.getLevel()); 
								Var.downLevel();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$15 ::= 
            {
              Object RESULT =null;
 
								Var.upLevel(); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
								Generador.print(e1); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent ::= FOR exp NT$12 DOWNTO exp NT$13 stepPart DO NT$14 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tagDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(tagD);
								Generador.label(((Tag)RESULT).getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.assignment(Var.getVar(e1), e1 + " - " + p);
                                                                Generador.goTo(tagFor);
                                                                Generador.label(((Tag)RESULT).getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tagDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.label(tagFor);
								RESULT = Generador.condition(e1, Tag.MEQ, e2);
                                                                Generador.label(tagD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$12 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sent ::= FOR exp NT$9 TO exp NT$10 stepPart DO NT$11 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tagToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagTo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(tagTo);
								Generador.label(((Tag)RESULT).getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagTo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.assignment(Var.getVar(e1), e1 + " + " + p);
                                                                Generador.goTo(tagFor);
                                                                Generador.label(((Tag)RESULT).getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tagToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagTo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.label(tagFor);
								RESULT = Generador.condition(e2, Tag.MEQ, e1);
								Generador.label(tagTo);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sent ::= FOR AP exp PYC NT$6 cond PYC NT$7 exp CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(RESULT.toString());
								Generador.label(c1.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.goTo(tagFor);
								Generador.label(c1.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								RESULT = Generador.getTag();
								Generador.label(RESULT.toString());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$6 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(tagFor);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sent ::= DO NT$4 sent NT$5 WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tagDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tagDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
								Generador.label(c.getV());
								Generador.goTo(tagDo);
								Generador.label(c.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tagDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$4 ::= 
            {
              Object RESULT =null;
		int tagDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tagDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.label(tagDo);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= WHILE AP NT$2 cond CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(tagWhile);
								Generador.label(c.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(c.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int tagWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(tagWhile);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= IF AP cond CP NT$0 sent NT$1 elsePart 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tagIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
								Generador.label(tagIf);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tagIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

								Generador.goTo(tagIf);
								Generador.label(c.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int tagIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tagIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
								Generador.label(c.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= exp PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= error 
            {
              Object RESULT =null;
		 Generador.error();
	Generador.halt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= listaSent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

