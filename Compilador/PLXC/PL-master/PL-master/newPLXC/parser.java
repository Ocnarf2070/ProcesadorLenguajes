
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 08 15:26:45 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 08 15:26:45 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\003\003\000\002\002\004\000\002\003" +
    "\004\000\002\002\004\000\002\002\004\000\002\017\002" +
    "\000\002\020\002\000\002\021\002\000\002\002\016\000" +
    "\002\022\002\000\002\002\006\000\002\002\007\000\002" +
    "\007\004\000\002\007\005\000\002\012\003\000\002\012" +
    "\006\000\002\013\004\000\002\006\005\000\002\006\010" +
    "\000\002\014\004\000\002\014\002\000\002\016\003\000" +
    "\002\016\003\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\011\006\000\002\023\002\000\002\011\007\000" +
    "\002\004\003\000\002\004\003\000\002\015\003\000\002" +
    "\015\006\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\004\000\002\024\002\000\002\010\006\000" +
    "\002\025\002\000\002\010\006\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\016\004\004\005\016\006\013\012\005\020" +
    "\007\044\006\001\002\000\004\044\uffec\001\002\000\016" +
    "\004\ufff8\005\ufff8\006\ufff8\012\ufff8\020\ufff8\044\ufff8\001" +
    "\002\000\006\014\146\016\061\001\002\000\004\007\102" +
    "\001\002\000\020\002\100\004\004\005\016\006\013\012" +
    "\005\020\007\044\006\001\002\000\022\002\001\004\001" +
    "\005\001\006\001\012\001\013\001\020\001\044\001\001" +
    "\002\000\004\011\077\001\002\000\004\007\073\001\002" +
    "\000\004\044\022\001\002\000\006\011\020\017\017\001" +
    "\002\000\004\044\uffeb\001\002\000\004\044\022\001\002" +
    "\000\022\002\ufffd\004\ufffd\005\ufffd\006\ufffd\012\ufffd\013" +
    "\ufffd\020\ufffd\044\ufffd\001\002\000\006\011\ufff4\017\ufff4" +
    "\001\002\000\012\011\ufff3\014\067\016\ufff3\017\ufff3\001" +
    "\002\000\010\011\uffed\016\025\017\uffed\001\002\000\006" +
    "\011\ufff1\017\ufff1\001\002\000\012\007\035\042\032\043" +
    "\036\044\026\001\002\000\046\010\uffdc\011\uffdc\014\060" +
    "\015\uffdc\016\061\017\uffdc\021\uffdc\022\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\001\002\000\042\010\uffe4\011\uffe4\015" +
    "\uffe4\017\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\001\002\000\016\011\uffee\017\uffee\034\045\035\046" +
    "\036\050\037\047\001\002\000\042\010\uffe2\011\uffe2\015" +
    "\uffe2\017\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\001\002\000\042\010\uffde\011\uffde\015\uffde\017\uffde" +
    "\021\uffde\022\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\034\uffde\035\uffde\036\uffde\037\uffde\001\002" +
    "\000\042\010\uffe3\011\uffe3\015\uffe3\017\uffe3\021\uffe3\022" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\001\002\000\042\010" +
    "\uffea\011\uffea\015\uffea\017\uffea\021\uffea\022\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\034\uffea\035" +
    "\uffea\036\uffea\037\uffea\001\002\000\016\004\037\005\041" +
    "\007\035\042\032\043\036\044\026\001\002\000\042\010" +
    "\uffdd\011\uffdd\015\uffdd\017\uffdd\021\uffdd\022\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\001\002\000\004\010\056\001\002" +
    "\000\014\010\055\034\045\035\046\036\050\037\047\001" +
    "\002\000\004\010\042\001\002\000\012\007\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\001\002\000\012\007\035\042\032\043" +
    "\036\044\026\001\002\000\042\010\uffdf\011\uffdf\015\uffdf" +
    "\017\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\034\045\035\046\036\050\037\047" +
    "\001\002\000\012\007\035\042\032\043\036\044\026\001" +
    "\002\000\012\007\035\042\032\043\036\044\026\001\002" +
    "\000\012\007\035\042\032\043\036\044\026\001\002\000" +
    "\012\007\035\042\032\043\036\044\026\001\002\000\042" +
    "\010\uffe7\011\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\001\002\000\042\010\uffe6\011" +
    "\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\001\002\000\042\010\uffe8\011\uffe8\015\uffe8" +
    "\017\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\034\uffe8\035\uffe8\036\050\037\047" +
    "\001\002\000\042\010\uffe9\011\uffe9\015\uffe9\017\uffe9\021" +
    "\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\034\uffe9\035\uffe9\036\050\037\047\001\002\000" +
    "\042\010\uffe5\011\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\001\002\000\012\007\035" +
    "\042\032\043\036\044\026\001\002\000\042\010\uffe1\011" +
    "\uffe1\015\uffe1\017\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\034\045\035\046\036" +
    "\050\037\047\001\002\000\012\007\035\042\032\043\036" +
    "\044\026\001\002\000\012\007\035\042\032\043\036\044" +
    "\026\001\002\000\042\010\ufff0\011\ufff0\015\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\034\045\035\046\036\050\037\047\001\002" +
    "\000\014\015\064\034\045\035\046\036\050\037\047\001" +
    "\002\000\044\010\uffdb\011\uffdb\015\uffdb\016\065\017\uffdb" +
    "\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002" +
    "\000\012\007\035\042\032\043\036\044\026\001\002\000" +
    "\042\010\uffef\011\uffef\015\uffef\017\uffef\021\uffef\022\uffef" +
    "\024\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\034" +
    "\045\035\046\036\050\037\047\001\002\000\004\042\070" +
    "\001\002\000\004\015\071\001\002\000\010\011\ufff2\016" +
    "\ufff2\017\ufff2\001\002\000\006\011\ufff5\017\ufff5\001\002" +
    "\000\012\007\035\042\032\043\036\044\026\001\002\000" +
    "\014\010\075\034\045\035\046\036\050\037\047\001\002" +
    "\000\004\011\076\001\002\000\022\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\012\ufff6\013\ufff6\020\ufff6\044\ufff6\001\002" +
    "\000\022\002\ufffe\004\ufffe\005\ufffe\006\ufffe\012\ufffe\013" +
    "\ufffe\020\ufffe\044\ufffe\001\002\000\004\002\000\001\002" +
    "\000\022\002\uffff\004\uffff\005\uffff\006\uffff\012\uffff\013" +
    "\uffff\020\uffff\044\uffff\001\002\000\012\007\035\042\032" +
    "\043\036\044\026\001\002\000\014\011\104\034\045\035" +
    "\046\036\050\037\047\001\002\000\014\007\ufffc\023\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\001\002\000\014\007\111\023" +
    "\110\042\032\043\036\044\026\001\002\000\026\021\127" +
    "\022\124\024\126\025\130\026\123\027\125\034\045\035" +
    "\046\036\050\037\047\001\002\000\010\011\140\030\114" +
    "\031\116\001\002\000\014\007\111\023\110\042\032\043" +
    "\036\044\026\001\002\000\020\004\037\005\041\007\111" +
    "\023\110\042\032\043\036\044\026\001\002\000\030\010" +
    "\055\021\127\022\124\024\126\025\130\026\123\027\125" +
    "\034\045\035\046\036\050\037\047\001\002\000\010\010" +
    "\115\030\114\031\116\001\002\000\014\007\uffd3\023\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\001\002\000\012\010\uffcf\011" +
    "\uffcf\030\uffcf\031\uffcf\001\002\000\014\007\uffd1\023\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\001\002\000\014\007\111\023" +
    "\110\042\032\043\036\044\026\001\002\000\012\010\uffd0" +
    "\011\uffd0\030\uffd0\031\uffd0\001\002\000\014\007\111\023" +
    "\110\042\032\043\036\044\026\001\002\000\012\010\uffd2" +
    "\011\uffd2\030\uffd2\031\uffd2\001\002\000\012\007\035\042" +
    "\032\043\036\044\026\001\002\000\012\007\035\042\032" +
    "\043\036\044\026\001\002\000\012\007\035\042\032\043" +
    "\036\044\026\001\002\000\012\007\035\042\032\043\036" +
    "\044\026\001\002\000\012\007\035\042\032\043\036\044" +
    "\026\001\002\000\012\007\035\042\032\043\036\044\026" +
    "\001\002\000\022\010\uffd7\011\uffd7\030\uffd7\031\uffd7\034" +
    "\045\035\046\036\050\037\047\001\002\000\022\010\uffd6" +
    "\011\uffd6\030\uffd6\031\uffd6\034\045\035\046\036\050\037" +
    "\047\001\002\000\022\010\uffda\011\uffda\030\uffda\031\uffda" +
    "\034\045\035\046\036\050\037\047\001\002\000\022\010" +
    "\uffd9\011\uffd9\030\uffd9\031\uffd9\034\045\035\046\036\050" +
    "\037\047\001\002\000\022\010\uffd8\011\uffd8\030\uffd8\031" +
    "\uffd8\034\045\035\046\036\050\037\047\001\002\000\022" +
    "\010\uffd5\011\uffd5\030\uffd5\031\uffd5\034\045\035\046\036" +
    "\050\037\047\001\002\000\012\010\uffd4\011\uffd4\030\uffd4" +
    "\031\uffd4\001\002\000\012\007\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\001\002\000\012\007\035\042\032\043\036\044\026" +
    "\001\002\000\014\010\143\034\045\035\046\036\050\037" +
    "\047\001\002\000\016\004\ufffa\005\ufffa\006\ufffa\012\ufffa" +
    "\020\ufffa\044\ufffa\001\002\000\016\004\004\005\016\006" +
    "\013\012\005\020\007\044\006\001\002\000\022\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\012\ufff9\013\ufff9\020\ufff9\044" +
    "\ufff9\001\002\000\012\007\035\042\032\043\036\044\026" +
    "\001\002\000\014\015\150\034\045\035\046\036\050\037" +
    "\047\001\002\000\004\016\065\001\002\000\016\004\004" +
    "\005\016\006\013\012\005\020\007\044\006\001\002\000" +
    "\020\004\004\005\016\006\013\012\005\013\153\020\007" +
    "\044\006\001\002\000\022\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\012\ufff7\013\ufff7\020\ufff7\044\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\014\002\010\003\007\006\011\007\014\016" +
    "\013\001\001\000\002\001\001\000\004\022\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\100\006" +
    "\011\007\014\016\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\022\013\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\022" +
    "\013\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\023\001\001\000\002\001\001" +
    "\000\014\004\032\005\027\006\033\011\026\015\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\032\005\037\006\033\011\026" +
    "\015\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\042\001\001" +
    "\000\014\004\032\005\043\006\033\011\026\015\030\001" +
    "\001\000\002\001\001\000\014\004\032\005\053\006\033" +
    "\011\026\015\030\001\001\000\014\004\032\005\052\006" +
    "\033\011\026\015\030\001\001\000\014\004\032\005\051" +
    "\006\033\011\026\015\030\001\001\000\014\004\032\005" +
    "\050\006\033\011\026\015\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\032\005\056\006\033\011\026" +
    "\015\030\001\001\000\002\001\001\000\014\004\032\005" +
    "\062\006\033\011\026\015\030\001\001\000\014\004\032" +
    "\005\061\006\033\011\026\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\032" +
    "\005\065\006\033\011\026\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\032\005\073\006\033\011" +
    "\026\015\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\032\005\102\006\033\011\026" +
    "\015\030\001\001\000\002\001\001\000\004\017\104\001" +
    "\001\000\016\004\032\005\105\006\033\010\106\011\026" +
    "\015\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\032\005\105\006\033\010\136\011\026\015\030" +
    "\001\001\000\016\004\032\005\111\006\033\010\112\011" +
    "\026\015\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\120\001\001\000\002\001\001\000\004\025" +
    "\116\001\001\000\016\004\032\005\105\006\033\010\117" +
    "\011\026\015\030\001\001\000\002\001\001\000\016\004" +
    "\032\005\105\006\033\010\121\011\026\015\030\001\001" +
    "\000\002\001\001\000\014\004\032\005\135\006\033\011" +
    "\026\015\030\001\001\000\014\004\032\005\134\006\033" +
    "\011\026\015\030\001\001\000\014\004\032\005\133\006" +
    "\033\011\026\015\030\001\001\000\014\004\032\005\132" +
    "\006\033\011\026\015\030\001\001\000\014\004\032\005" +
    "\131\006\033\011\026\015\030\001\001\000\014\004\032" +
    "\005\130\006\033\011\026\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\140\001\001\000\014\004\032\005\141\006\033" +
    "\011\026\015\030\001\001\000\002\001\001\000\004\021" +
    "\143\001\001\000\012\002\144\006\011\007\014\016\013" +
    "\001\001\000\002\001\001\000\014\004\032\005\146\006" +
    "\033\011\026\015\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\010\003\151\006\011\007\014\016" +
    "\013\001\001\000\012\002\100\006\011\007\014\016\013" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	@Override
	public void report_error(String message, Object info){
		Generador.error();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	int tipoVar = 0;
	
	/* flag for casting int to float */
	boolean flagCastFloat = false;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= AP cond CP 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
										RESULT = c;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= cond OR NT$6 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Generador.label(c1.getV());
									Generador.goTo(c2.getF());
									RESULT = c2;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$6 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

									Generador.label(c1.getF());
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= cond AND NT$5 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									Generador.label(c1.getF());
									Generador.goTo(c2.getV());
									RESULT = c2;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

									Generador.label(c1.getV());
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= NOT cond 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									String temp = c.getV();
									c.setV(c.getF());
									c.setF(temp);
									RESULT = c;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= exp MAOQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT = Generador.condition(e1, Tag.MAOQ, e2);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= exp MAQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT = Generador.condition(e1, Tag.MAQ, e2);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= exp MEOQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT = Generador.condition(e1, Tag.MEOQ, e2);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= exp MEQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT = Generador.condition(e1, Tag.MEQ, e2);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= exp NEQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT = Generador.condition(e1, Tag.NEQ, e2);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond ::= exp EQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
										RESULT = Generador.condition(e1, Tag.EQ, e2);
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variable ::= IDENT AC exp CC 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
											if(SymbolTable.exists(i)){
												String temp = Generador.getTemp(SymbolTable.getLastVar(i).getTipo());
												Generador.assignment(temp, i + "[" + n + "]");
												RESULT = temp;
                                    		}
                                   			 else{
                                        		Generador.error();
                                    		}
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									if(SymbolTable.exists(i)){
										RESULT = i;
									}
									else{
										Generador.error();
									}
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // numero ::= NUMEROF 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RESULT = n.toString();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // numero ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									RESULT = n.toString();
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // casting ::= AP FLOAT CP NT$4 exp 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												flagCastFloat = false;
												RESULT = e1;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casting",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              String RESULT =null;

												flagCastFloat = true;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // casting ::= AP INT CP exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = Generador.casting(e1, 1);
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("casting",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= variable 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = v;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= numero 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												if(flagCastFloat){
													RESULT = Generador.casting(n, 2);
												}
												else{
													RESULT = n;
												}
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= casting 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = c;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
												RESULT = e1;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												System.out.println("Entro 3");
												RESULT = Generador.div(e1, e2);
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = Generador.mul(e1, e2);
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = Generador.resta(e1, e2);
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = Generador.suma(e1, e2);
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= asig 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = a;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= FLOAT 
            {
              Integer RESULT =null;
		
										tipoVar = new Integer(2);
										RESULT = tipoVar;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= INT 
            {
              Integer RESULT =null;
		
										tipoVar = new Integer(1);
										RESULT = tipoVar;
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicializacion ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // inicializacion ::= ASIG exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												RESULT = e1;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asig ::= IDENT AC exp CC ASIG exp 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
															Generador.assignment(v, e1, n);
															RESULT = v;
														
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asig ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												Generador.assignment(v, e1);
												RESULT = v;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asig",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decIni ::= dec inicializacion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
												SymbolTable.getLastVar(i).setTipo(tipoVar);
												SymbolTable.getLastVar(i).setValor(p);
												Generador.assignment(i, p);
												RESULT = i;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decIni",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dec ::= IDENT AC NUMERO CC 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
												SymbolTable.addVar(i, new Variable("0", 0, SymbolTable.getLevel()));
												SymbolTable.getLastVar(i).setIsArray(true);
												SymbolTable.getLastVar(i).setTam(new Integer(n));
												RESULT = i;
											
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
									SymbolTable.addVar(i, new Variable("0", 0, SymbolTable.getLevel()));
									RESULT = i;
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listaDec ::= listaDec COMA decIni 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // listaDec ::= tipo decIni 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
											Generador.print(e1);
										
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= AL NT$3 listaSent CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
										SymbolTable.clear(SymbolTable.getLevel()); 
										SymbolTable.downLevel();
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
 
							SymbolTable.upLevel(); 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= FOR AP exp PYC NT$0 cond PYC NT$1 exp CP NT$2 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
										Generador.goTo(RESULT.toString());
										Generador.label(c1.getF());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

										Generador.goTo(tagFor);
										Generador.label(c1.getV());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

										RESULT = Generador.getLabel();
										Generador.label(RESULT.toString());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

													Generador.label(tagFor);
												
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= listaDec PYC 
            {
              Object RESULT =null;
		
										System.out.println(SymbolTable.getSymbolTable().toString());
									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= asig PYC 
            {
              Object RESULT =null;
		

									
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

