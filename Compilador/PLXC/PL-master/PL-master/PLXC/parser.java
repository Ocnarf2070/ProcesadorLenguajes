
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 09 11:12:13 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 09 11:12:13 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\004\000\002\012\002\000\002\013\002" +
    "\000\002\003\012\000\002\014\002\000\002\015\002\000" +
    "\002\003\011\000\002\016\002\000\002\017\002\000\002" +
    "\003\013\000\002\020\002\000\002\021\002\000\002\022" +
    "\002\000\002\003\016\000\002\023\002\000\002\024\002" +
    "\000\002\025\002\000\002\003\014\000\002\026\002\000" +
    "\002\027\002\000\002\030\002\000\002\003\014\000\002" +
    "\003\007\000\002\031\002\000\002\003\006\000\002\003" +
    "\005\000\002\011\004\000\002\011\002\000\002\006\003" +
    "\000\002\006\005\000\002\007\005\000\002\007\003\000" +
    "\002\004\004\000\002\004\002\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\004\000\002\010\005\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\004\000\002\032\002\000\002\005\006\000" +
    "\002\033\002\000\002\005\006\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\036\004\006\012\004\015\023\017\014\021" +
    "\017\022\021\023\005\027\011\030\022\031\020\033\010" +
    "\050\015\051\024\052\007\001\002\000\036\004\uffe7\012" +
    "\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\033\uffe7\050\uffe7\051\uffe7\052\uffe7\001" +
    "\002\000\004\015\177\001\002\000\004\052\170\001\002" +
    "\000\060\007\uffd0\010\uffd0\011\uffd0\014\165\016\uffd0\022" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\030\164\031\163\032\uffd0" +
    "\033\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002\000\020" +
    "\015\023\030\022\031\020\033\010\050\015\051\024\052" +
    "\007\001\002\000\020\015\124\030\022\031\020\033\010" +
    "\050\015\051\024\052\007\001\002\000\016\007\123\011" +
    "\032\032\027\033\030\035\031\036\026\001\002\000\040" +
    "\002\121\004\006\012\004\015\023\017\014\021\017\022" +
    "\021\023\005\027\011\030\022\031\020\033\010\050\015" +
    "\051\024\052\007\001\002\000\004\015\110\001\002\000" +
    "\052\007\uffcf\010\uffcf\011\uffcf\016\uffcf\022\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\001\002\000\042\002\001\004\001\012\001\013" +
    "\001\015\001\017\001\021\001\022\001\023\001\027\001" +
    "\030\001\031\001\033\001\050\001\051\001\052\001\001" +
    "\002\000\004\015\104\001\002\000\004\052\103\001\002" +
    "\000\036\004\ufff7\012\ufff7\015\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\027\ufff7\030\ufff7\031\ufff7\033\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\001\002\000\004\052\041\001\002\000" +
    "\020\015\023\030\022\031\020\033\010\050\015\051\024" +
    "\052\007\001\002\000\052\007\uffce\010\uffce\011\uffce\016" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\uffce\032\uffce\033\uffce" +
    "\035\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\001\002\000\016\011\032" +
    "\016\033\032\027\033\030\035\031\036\026\001\002\000" +
    "\020\015\023\030\022\031\020\033\010\050\015\051\024" +
    "\052\007\001\002\000\020\015\023\030\022\031\020\033" +
    "\010\050\015\051\024\052\007\001\002\000\020\015\023" +
    "\030\022\031\020\033\010\050\015\051\024\052\007\001" +
    "\002\000\020\015\023\030\022\031\020\033\010\050\015" +
    "\051\024\052\007\001\002\000\020\015\023\030\022\031" +
    "\020\033\010\050\015\051\024\052\007\001\002\000\052" +
    "\007\uffd6\010\uffd6\011\uffd6\016\uffd6\022\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\032\uffd6\033\uffd6\035\uffd6\036\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\001\002\000\052\007\uffda\010\uffda\011\uffda\016\uffda" +
    "\022\uffda\024\uffda\025\uffda\026\uffda\032\uffda\033\uffda\035" +
    "\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\001\002\000\052\007\uffd9\010" +
    "\uffd9\011\uffd9\016\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\032\uffd9\033\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\001\002" +
    "\000\052\007\uffdb\010\uffdb\011\032\016\uffdb\022\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\032\uffdb\033\uffdb\035\031\036\026" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\001\002\000\052\007\uffdc\010\uffdc\011\032" +
    "\016\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\032\uffdc\033" +
    "\uffdc\035\031\036\026\040\uffdc\041\uffdc\042\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\047\uffdc\001\002\000\052\007" +
    "\uffd8\010\uffd8\011\uffd8\016\uffd8\022\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\032\uffd8\033\uffd8\035\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\001\002\000\052\007\uffd5\010\uffd5\011\uffd5\016\uffd5\022" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\032\uffd5\033\uffd5\035\uffd5" +
    "\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\001\002\000\036\004\006\012\004" +
    "\015\023\017\014\021\017\022\021\023\005\027\011\030" +
    "\022\031\020\033\010\050\015\051\024\052\007\001\002" +
    "\000\004\023\ufff6\001\002\000\004\023\045\001\002\000" +
    "\004\015\046\001\002\000\022\015\052\030\022\031\020" +
    "\033\010\034\051\050\015\051\024\052\007\001\002\000" +
    "\030\011\032\032\027\033\030\035\031\036\026\040\065" +
    "\041\070\042\071\043\064\044\067\045\066\001\002\000" +
    "\010\016\101\046\055\047\057\001\002\000\022\015\052" +
    "\030\022\031\020\033\010\034\051\050\015\051\024\052" +
    "\007\001\002\000\022\015\052\030\022\031\020\033\010" +
    "\034\051\050\015\051\024\052\007\001\002\000\032\011" +
    "\032\016\033\032\027\033\030\035\031\036\026\040\065" +
    "\041\070\042\071\043\064\044\067\045\066\001\002\000" +
    "\010\016\056\046\055\047\057\001\002\000\022\015\uffc6" +
    "\030\uffc6\031\uffc6\033\uffc6\034\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\012\007\uffc2\016\uffc2\046\uffc2\047\uffc2" +
    "\001\002\000\022\015\uffc4\030\uffc4\031\uffc4\033\uffc4\034" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\022\015\052" +
    "\030\022\031\020\033\010\034\051\050\015\051\024\052" +
    "\007\001\002\000\012\007\uffc3\016\uffc3\046\uffc3\047\uffc3" +
    "\001\002\000\022\015\052\030\022\031\020\033\010\034" +
    "\051\050\015\051\024\052\007\001\002\000\012\007\uffc5" +
    "\016\uffc5\046\uffc5\047\uffc5\001\002\000\020\015\023\030" +
    "\022\031\020\033\010\050\015\051\024\052\007\001\002" +
    "\000\020\015\023\030\022\031\020\033\010\050\015\051" +
    "\024\052\007\001\002\000\020\015\023\030\022\031\020" +
    "\033\010\050\015\051\024\052\007\001\002\000\020\015" +
    "\023\030\022\031\020\033\010\050\015\051\024\052\007" +
    "\001\002\000\020\015\023\030\022\031\020\033\010\050" +
    "\015\051\024\052\007\001\002\000\020\015\023\030\022" +
    "\031\020\033\010\050\015\051\024\052\007\001\002\000" +
    "\024\007\uffca\011\032\016\uffca\032\027\033\030\035\031" +
    "\036\026\046\uffca\047\uffca\001\002\000\024\007\uffc9\011" +
    "\032\016\uffc9\032\027\033\030\035\031\036\026\046\uffc9" +
    "\047\uffc9\001\002\000\024\007\uffcd\011\032\016\uffcd\032" +
    "\027\033\030\035\031\036\026\046\uffcd\047\uffcd\001\002" +
    "\000\024\007\uffcc\011\032\016\uffcc\032\027\033\030\035" +
    "\031\036\026\046\uffcc\047\uffcc\001\002\000\024\007\uffcb" +
    "\011\032\016\uffcb\032\027\033\030\035\031\036\026\046" +
    "\uffcb\047\uffcb\001\002\000\024\007\uffc8\011\032\016\uffc8" +
    "\032\027\033\030\035\031\036\026\046\uffc8\047\uffc8\001" +
    "\002\000\012\007\uffc7\016\uffc7\046\uffc7\047\uffc7\001\002" +
    "\000\004\007\102\001\002\000\044\002\ufff5\004\ufff5\012" +
    "\ufff5\013\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\001\002\000\052\007\uffd3\010\uffd3\011\uffd3" +
    "\016\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\032\uffd3\033" +
    "\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3" +
    "\044\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002\000\020\015" +
    "\023\030\022\031\020\033\010\050\015\051\024\052\007" +
    "\001\002\000\016\011\032\016\106\032\027\033\030\035" +
    "\031\036\026\001\002\000\004\007\107\001\002\000\044" +
    "\002\uffe8\004\uffe8\012\uffe8\013\uffe8\015\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\033\uffe8\050\uffe8\051\uffe8\052\uffe8\001\002\000\022\015" +
    "\052\030\022\031\020\033\010\034\051\050\015\051\024" +
    "\052\007\001\002\000\010\016\112\046\055\047\057\001" +
    "\002\000\036\004\ufffd\012\ufffd\015\ufffd\017\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\027\ufffd\030\ufffd\031\ufffd\033\ufffd\050" +
    "\ufffd\051\ufffd\052\ufffd\001\002\000\036\004\006\012\004" +
    "\015\023\017\014\021\017\022\021\023\005\027\011\030" +
    "\022\031\020\033\010\050\015\051\024\052\007\001\002" +
    "\000\044\002\ufffc\004\ufffc\012\ufffc\013\ufffc\015\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\033\ufffc\050\ufffc\051\ufffc\052\ufffc\001\002\000" +
    "\044\002\uffdd\004\uffdd\012\uffdd\013\uffdd\015\uffdd\017\uffdd" +
    "\020\117\021\uffdd\022\uffdd\023\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\033\uffdd\050\uffdd\051\uffdd\052\uffdd\001\002\000\044" +
    "\002\ufffb\004\ufffb\012\ufffb\013\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\027\ufffb\030\ufffb\031\ufffb" +
    "\033\ufffb\050\ufffb\051\ufffb\052\ufffb\001\002\000\036\004" +
    "\006\012\004\015\023\017\014\021\017\022\021\023\005" +
    "\027\011\030\022\031\020\033\010\050\015\051\024\052" +
    "\007\001\002\000\044\002\uffde\004\uffde\012\uffde\013\uffde" +
    "\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\027" +
    "\uffde\030\uffde\031\uffde\033\uffde\050\uffde\051\uffde\052\uffde" +
    "\001\002\000\004\002\000\001\002\000\042\002\uffff\004" +
    "\uffff\012\uffff\013\uffff\015\uffff\017\uffff\021\uffff\022\uffff" +
    "\023\uffff\027\uffff\030\uffff\031\uffff\033\uffff\050\uffff\051" +
    "\uffff\052\uffff\001\002\000\044\002\ufffe\004\ufffe\012\ufffe" +
    "\013\ufffe\015\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\033\ufffe\050\ufffe\051\ufffe" +
    "\052\ufffe\001\002\000\020\015\023\030\022\031\020\033" +
    "\010\050\015\051\024\052\007\001\002\000\020\011\032" +
    "\024\ufff0\026\uffec\032\027\033\030\035\031\036\026\001" +
    "\002\000\004\024\141\001\002\000\004\026\130\001\002" +
    "\000\020\015\023\030\022\031\020\033\010\050\015\051" +
    "\024\052\007\001\002\000\020\011\032\022\uffeb\025\uffeb" +
    "\032\027\033\030\035\031\036\026\001\002\000\006\022" +
    "\uffe3\025\133\001\002\000\020\015\023\030\022\031\020" +
    "\033\010\050\015\051\024\052\007\001\002\000\004\022" +
    "\135\001\002\000\036\004\uffea\012\uffea\015\uffea\017\uffea" +
    "\021\uffea\022\uffea\023\uffea\027\uffea\030\uffea\031\uffea\033" +
    "\uffea\050\uffea\051\uffea\052\uffea\001\002\000\036\004\006" +
    "\012\004\015\023\017\014\021\017\022\021\023\005\027" +
    "\011\030\022\031\020\033\010\050\015\051\024\052\007" +
    "\001\002\000\044\002\uffe9\004\uffe9\012\uffe9\013\uffe9\015" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\033\uffe9\050\uffe9\051\uffe9\052\uffe9\001" +
    "\002\000\016\011\032\022\uffe4\032\027\033\030\035\031" +
    "\036\026\001\002\000\020\015\023\030\022\031\020\033" +
    "\010\050\015\051\024\052\007\001\002\000\020\011\032" +
    "\022\uffef\025\uffef\032\027\033\030\035\031\036\026\001" +
    "\002\000\006\022\uffe3\025\133\001\002\000\004\022\145" +
    "\001\002\000\036\004\uffee\012\uffee\015\uffee\017\uffee\021" +
    "\uffee\022\uffee\023\uffee\027\uffee\030\uffee\031\uffee\033\uffee" +
    "\050\uffee\051\uffee\052\uffee\001\002\000\036\004\006\012" +
    "\004\015\023\017\014\021\017\022\021\023\005\027\011" +
    "\030\022\031\020\033\010\050\015\051\024\052\007\001" +
    "\002\000\044\002\uffed\004\uffed\012\uffed\013\uffed\015\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\027\uffed\030" +
    "\uffed\031\uffed\033\uffed\050\uffed\051\uffed\052\uffed\001\002" +
    "\000\020\007\151\011\032\016\033\032\027\033\030\035" +
    "\031\036\026\001\002\000\022\015\ufff4\030\ufff4\031\ufff4" +
    "\033\ufff4\034\ufff4\050\ufff4\051\ufff4\052\ufff4\001\002\000" +
    "\022\015\052\030\022\031\020\033\010\034\051\050\015" +
    "\051\024\052\007\001\002\000\010\007\154\046\055\047" +
    "\057\001\002\000\020\015\ufff3\030\ufff3\031\ufff3\033\ufff3" +
    "\050\ufff3\051\ufff3\052\ufff3\001\002\000\020\015\023\030" +
    "\022\031\020\033\010\050\015\051\024\052\007\001\002" +
    "\000\016\011\032\016\157\032\027\033\030\035\031\036" +
    "\026\001\002\000\036\004\ufff2\012\ufff2\015\ufff2\017\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\027\ufff2\030\ufff2\031\ufff2\033" +
    "\ufff2\050\ufff2\051\ufff2\052\ufff2\001\002\000\036\004\006" +
    "\012\004\015\023\017\014\021\017\022\021\023\005\027" +
    "\011\030\022\031\020\033\010\050\015\051\024\052\007" +
    "\001\002\000\044\002\ufff1\004\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\027\ufff1" +
    "\030\ufff1\031\ufff1\033\ufff1\050\ufff1\051\ufff1\052\ufff1\001" +
    "\002\000\052\007\uffd7\010\uffd7\011\uffd7\016\uffd7\022\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\032\uffd7\033\uffd7\035\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\046\uffd7\047\uffd7\001\002\000\052\007\uffd2\010\uffd2\011" +
    "\uffd2\016\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2\032\uffd2" +
    "\033\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\052" +
    "\007\uffd4\010\uffd4\011\uffd4\016\uffd4\022\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\001\002\000\020\015\023\030\022\031\020\033\010" +
    "\050\015\051\024\052\007\001\002\000\052\007\uffd1\010" +
    "\uffd1\011\032\016\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\032\027\033\030\035\031\036\026\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002" +
    "\000\006\007\175\010\174\001\002\000\010\007\uffdf\010" +
    "\uffdf\014\172\001\002\000\006\007\uffe2\010\uffe2\001\002" +
    "\000\020\015\023\030\022\031\020\033\010\050\015\051" +
    "\024\052\007\001\002\000\020\007\uffe0\010\uffe0\011\032" +
    "\032\027\033\030\035\031\036\026\001\002\000\004\052" +
    "\170\001\002\000\044\002\uffe5\004\uffe5\012\uffe5\013\uffe5" +
    "\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\050\uffe5\051\uffe5\052\uffe5" +
    "\001\002\000\006\007\uffe1\010\uffe1\001\002\000\022\015" +
    "\ufffa\030\ufffa\031\ufffa\033\ufffa\034\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\001\002\000\022\015\052\030\022\031\020\033" +
    "\010\034\051\050\015\051\024\052\007\001\002\000\010" +
    "\016\202\046\055\047\057\001\002\000\036\004\ufff9\012" +
    "\ufff9\015\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\033\ufff9\050\ufff9\051\ufff9\052\ufff9\001" +
    "\002\000\036\004\006\012\004\015\023\017\014\021\017" +
    "\022\021\023\005\027\011\030\022\031\020\033\010\050" +
    "\015\051\024\052\007\001\002\000\044\002\ufff8\004\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\001\002\000\036\004\006\012\004\015" +
    "\023\017\014\021\017\022\021\023\005\027\011\030\022" +
    "\031\020\033\010\050\015\051\024\052\007\001\002\000" +
    "\040\004\006\012\004\013\207\015\023\017\014\021\017" +
    "\022\021\023\005\027\011\030\022\031\020\033\010\050" +
    "\015\051\024\052\007\001\002\000\044\002\uffe6\004\uffe6" +
    "\012\uffe6\013\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\027\uffe6\030\uffe6\031\uffe6\033\uffe6\050\uffe6" +
    "\051\uffe6\052\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\010\002\012\003\015\010\011\001\001\000" +
    "\004\031\204\001\001\000\002\001\001\000\006\006\166" +
    "\007\170\001\001\000\002\001\001\000\004\010\161\001" +
    "\001\000\004\010\124\001\001\000\002\001\001\000\006" +
    "\003\121\010\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\041\001\001\000\002\001\001\000\004\010" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\037\001\001\000\004\010\036\001\001\000\004\010" +
    "\035\001\001\000\004\010\034\001\001\000\004\010\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\042\010\011\001\001\000" +
    "\004\017\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\047\010\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\077\010\046\001\001\000\006" +
    "\005\053\010\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\061\001\001\000\002\001\001\000\004" +
    "\033\057\001\001\000\006\005\060\010\046\001\001\000" +
    "\002\001\001\000\006\005\062\010\046\001\001\000\002" +
    "\001\001\000\004\010\076\001\001\000\004\010\075\001" +
    "\001\000\004\010\074\001\001\000\004\010\073\001\001" +
    "\000\004\010\072\001\001\000\004\010\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\110\010\046\001\001" +
    "\000\002\001\001\000\004\012\112\001\001\000\006\003" +
    "\113\010\011\001\001\000\004\013\114\001\001\000\004" +
    "\004\115\001\001\000\002\001\001\000\006\003\117\010" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\147\001\001\000" +
    "\006\023\125\026\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\130\001\001\000\004\027\131\001" +
    "\001\000\004\011\133\001\001\000\004\010\137\001\001" +
    "\000\002\001\001\000\004\030\135\001\001\000\006\003" +
    "\136\010\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\141\001\001\000\004\024\142\001\001\000" +
    "\004\011\143\001\001\000\002\001\001\000\004\025\145" +
    "\001\001\000\006\003\146\010\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\151\001\001\000\006" +
    "\005\152\010\046\001\001\000\002\001\001\000\004\021" +
    "\154\001\001\000\004\010\155\001\001\000\002\001\001" +
    "\000\004\022\157\001\001\000\006\003\160\010\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\172\001\001\000\002\001\001\000\004\007" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\177\001\001\000\006\005\200\010\046\001\001\000" +
    "\002\001\001\000\004\015\202\001\001\000\006\003\203" +
    "\010\011\001\001\000\002\001\001\000\010\002\205\003" +
    "\015\010\011\001\001\000\006\003\121\010\011\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    public void report_error(String message, Object info){ // Syntax error handling message
        Generador.error();
	Generador.halt();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= AP cond CP 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								RESULT = c;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cond ::= cond OR NT$17 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Generador.label(c1.getV());
								Generador.goTo(c2.getF());
								RESULT = c2;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$17 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(c1.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cond ::= cond AND NT$16 cond 
            {
              Tag RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Tag) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c2 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Generador.label(c1.getF());
								Generador.goTo(c2.getV());
								RESULT = c2;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$16 ::= 
            {
              Tag RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(c1.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cond ::= NOT cond 
            {
              Tag RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								String temp = c.getV();
								c.setV(c.getF());
								c.setF(temp);
								RESULT = c;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cond ::= exp MAOQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MAOQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cond ::= exp MAQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MAQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cond ::= exp MEOQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MEOQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // cond ::= exp MEQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.MEQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cond ::= exp NEQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.NEQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond ::= exp EQ exp 
            {
              Tag RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.condition(e1, Tag.EQ, e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= NUMEROF 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = n.toString();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NUMERO 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = n.toString();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= IDENT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								if(Var.exists(i)){
									RESULT = Var.getVar(i);
								}
								else{
									Generador.error();
									Generador.halt();
								}
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= IDENT ASIG exp 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								if(Var.exists(i)){
									RESULT = Generador.assignment(Var.getVar(i), e1);
								}
								else{
									Generador.error();
									Generador.halt();
								}
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= IDENT MENOSMENOS 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								String temp = Generador.getTemp();
                                                                Generador.assignment(temp, Var.getVar(i1));
                                                                Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " - " + "1");
                                                                RESULT = temp;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MENOSMENOS IDENT 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " - " + "1");
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= IDENT MASMAS 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								String temp = Generador.getTemp();
								Generador.assignment(temp, Var.getVar(i1));
								Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " + " + "1");
								RESULT = temp;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= MASMAS IDENT 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.assignment(Var.getVar(i1), Var.getVar(i1) + " + " + "1");
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= AP exp CP 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								RESULT = e1;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic("-" + e1);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp MOD exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								String t1 = Generador.arithmetic(e1 + " / " + e2);
								String t2 = Generador.arithmetic(t1 + " * " + e2);
								RESULT = Generador.arithmetic(e1 + " - " + t2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp DIV exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " / " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp POR exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " * " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MENOS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " - " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp MAS exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = Generador.arithmetic(e1 + " + " + e2);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // elsePart ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePart",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elsePart ::= ELSE sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elsePart",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // dec ::= IDENT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Var.addVar(i, Var.getLevel());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dec ::= IDENT ASIG exp 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								Var.addVar(i, Var.getLevel());
								Generador.assignment(Var.getVar(i), e1);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // listaDec ::= listaDec COMA dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaDec ::= dec 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaDec",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stepPart ::= 
            {
              String RESULT =null;
		
								RESULT = "1";
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stepPart ::= STEP exp 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								RESULT = e1;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stepPart",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent ::= INT listaDec PYC 
            {
              Object RESULT =null;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= AL NT$15 listaSent CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
								Var.clear(Var.getLevel()); 
								Var.downLevel();
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$15 ::= 
            {
              Object RESULT =null;
 
								Var.upLevel(); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= PRINT AP exp CP PYC 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
								Generador.print(e1); 
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sent ::= FOR exp NT$12 DOWNTO exp NT$13 stepPart DO NT$14 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tagDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(tagD);
								Generador.label(((Tag)RESULT).getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.assignment(Var.getVar(e1), e1 + " - " + p);
                                                                Generador.goTo(tagFor);
                                                                Generador.label(((Tag)RESULT).getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tagDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagD = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.label(tagFor);
								RESULT = Generador.condition(e1, Tag.MEQ, e2);
                                                                Generador.label(tagD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$12 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sent ::= FOR exp NT$9 TO exp NT$10 stepPart DO NT$11 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tagToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagTo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(tagTo);
								Generador.label(((Tag)RESULT).getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tagToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagTo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.assignment(Var.getVar(e1), e1 + " + " + p);
                                                                Generador.goTo(tagFor);
                                                                Generador.label(((Tag)RESULT).getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tagToleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagToright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagTo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.label(tagFor);
								RESULT = Generador.condition(e2, Tag.MEQ, e1);
								Generador.label(tagTo);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$9 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sent ::= FOR AP exp PYC NT$6 cond PYC NT$7 exp CP NT$8 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(RESULT.toString());
								Generador.label(c1.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.goTo(tagFor);
								Generador.label(c1.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c1 = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								RESULT = Generador.getTag();
								Generador.label(RESULT.toString());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$6 ::= 
            {
              Object RESULT =null;
		int tagForleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagForright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tagFor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(tagFor);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= DO NT$4 sent NT$5 WHILE AP cond CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tagDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tagDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String tagDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
								Generador.label(c.getV());
								Generador.goTo(tagDo);
								Generador.label(c.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$5 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tagDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String tagDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
		int tagDoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tagDoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tagDo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

								Generador.label(tagDo);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= WHILE AP NT$2 cond CP NT$3 sent 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tagWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tagWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
								Generador.goTo(tagWhile);
								Generador.label(c.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tagWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tagWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String tagWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(c.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int tagWhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tagWhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tagWhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

								Generador.label(tagWhile);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= IF AP cond CP NT$0 sent NT$1 elsePart 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tagIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tagIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
								Generador.label(tagIf);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tagIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tagIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String tagIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

								Generador.goTo(tagIf);
								Generador.label(c.getF());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int tagIfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tagIfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tagIf = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tag c = (Tag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
								Generador.label(c.getV());
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= exp PYC 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= listaSent sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= listaSent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // listaSent ::= sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

