
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 04 12:49:55 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 04 12:49:55 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\004\010\000\002\004\007\000\002\004\011\000" +
    "\002\004\013\000\002\004\007\000\002\004\005\000\002" +
    "\005\002\000\002\005\004\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\004" +
    "\000\002\007\005\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\030\003\014\004\013\006\021\007\004\010" +
    "\006\011\016\013\007\017\020\021\012\036\010\037\005" +
    "\001\002\000\004\017\125\001\002\000\040\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\020\uffec\023\123\024\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\001\002\000\004\017\113\001\002\000\012\013\007" +
    "\017\020\036\010\037\005\001\002\000\036\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\020\uffeb\024\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\001" +
    "\002\000\032\002\ufffe\004\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\013\ufffe\017\ufffe\021\ufffe\022\ufffe\036\ufffe\037" +
    "\ufffe\001\002\000\026\004\013\006\021\007\004\010\006" +
    "\011\016\013\007\017\020\021\012\036\010\037\005\001" +
    "\002\000\004\017\101\001\002\000\004\002\uffff\001\002" +
    "\000\030\002\001\004\013\006\021\007\004\010\006\011" +
    "\016\013\007\017\020\021\012\036\010\037\005\001\002" +
    "\000\004\017\074\001\002\000\014\012\040\013\033\014" +
    "\035\015\042\024\073\001\002\000\012\013\007\017\020" +
    "\036\010\037\005\001\002\000\026\004\013\006\021\007" +
    "\004\010\006\011\016\013\007\017\020\021\012\036\010" +
    "\037\005\001\002\000\004\002\023\001\002\000\004\002" +
    "\000\001\002\000\004\007\025\001\002\000\004\017\026" +
    "\001\002\000\014\013\007\017\030\025\027\036\010\037" +
    "\005\001\002\000\014\013\007\017\030\025\027\036\010" +
    "\037\005\001\002\000\014\013\007\017\030\025\027\036" +
    "\010\037\005\001\002\000\010\020\060\034\057\035\061" +
    "\001\002\000\026\012\040\013\033\014\035\015\042\026" +
    "\037\027\036\030\041\031\034\032\044\033\043\001\002" +
    "\000\012\013\007\017\020\036\010\037\005\001\002\000" +
    "\012\013\007\017\020\036\010\037\005\001\002\000\012" +
    "\013\007\017\020\036\010\037\005\001\002\000\012\013" +
    "\007\017\020\036\010\037\005\001\002\000\012\013\007" +
    "\017\020\036\010\037\005\001\002\000\012\013\007\017" +
    "\020\036\010\037\005\001\002\000\012\013\007\017\020" +
    "\036\010\037\005\001\002\000\012\013\007\017\020\036" +
    "\010\037\005\001\002\000\012\013\007\017\020\036\010" +
    "\037\005\001\002\000\012\013\007\017\020\036\010\037" +
    "\005\001\002\000\022\012\040\013\033\014\035\015\042" +
    "\020\uffe8\024\uffe8\034\uffe8\035\uffe8\001\002\000\022\012" +
    "\040\013\033\014\035\015\042\020\uffe6\024\uffe6\034\uffe6" +
    "\035\uffe6\001\002\000\036\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\020\ufff0\024\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0" +
    "\032\ufff0\033\ufff0\034\ufff0\035\ufff0\001\002\000\022\012" +
    "\040\013\033\014\035\015\042\020\uffe7\024\uffe7\034\uffe7" +
    "\035\uffe7\001\002\000\036\012\ufff3\013\ufff3\014\035\015" +
    "\042\020\ufff3\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\001\002\000\022\012" +
    "\040\013\033\014\035\015\042\020\uffea\024\uffea\034\uffea" +
    "\035\uffea\001\002\000\022\012\040\013\033\014\035\015" +
    "\042\020\uffe9\024\uffe9\034\uffe9\035\uffe9\001\002\000\036" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\020\ufff1\024\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1" +
    "\035\ufff1\001\002\000\022\012\040\013\033\014\035\015" +
    "\042\020\uffe5\024\uffe5\034\uffe5\035\uffe5\001\002\000\036" +
    "\012\ufff2\013\ufff2\014\035\015\042\020\ufff2\024\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2" +
    "\035\ufff2\001\002\000\014\013\007\017\030\025\027\036" +
    "\010\037\005\001\002\000\004\024\063\001\002\000\014" +
    "\013\007\017\030\025\027\036\010\037\005\001\002\000" +
    "\012\020\uffe2\024\uffe2\034\057\035\061\001\002\000\034" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\013\ufff9\017\ufff9\021\ufff9\022\ufff9\036\ufff9\037\ufff9" +
    "\001\002\000\012\020\uffe3\024\uffe3\034\057\035\uffe3\001" +
    "\002\000\010\020\070\034\057\035\061\001\002\000\030" +
    "\012\040\013\033\014\035\015\042\020\067\026\037\027" +
    "\036\030\041\031\034\032\044\033\043\001\002\000\036" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\020\uffee\024\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\001\002\000\012\020\uffe1\024\uffe1\034\uffe1\035" +
    "\uffe1\001\002\000\012\020\uffe4\024\uffe4\034\057\035\061" +
    "\001\002\000\014\012\040\013\033\014\035\015\042\020" +
    "\067\001\002\000\034\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\013\ufffc\017\ufffc\021\ufffc\022" +
    "\ufffc\036\ufffc\037\ufffc\001\002\000\012\013\007\017\020" +
    "\036\010\037\005\001\002\000\014\012\040\013\033\014" +
    "\035\015\042\020\076\001\002\000\004\024\077\001\002" +
    "\000\034\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\013\ufff7\017\ufff7\021\ufff7\022\ufff7\036\ufff7" +
    "\037\ufff7\001\002\000\032\002\ufffd\004\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\017\ufffd\021\ufffd\022\ufffd" +
    "\036\ufffd\037\ufffd\001\002\000\014\013\007\017\030\025" +
    "\027\036\010\037\005\001\002\000\010\020\103\034\057" +
    "\035\061\001\002\000\026\004\013\006\021\007\004\010" +
    "\006\011\016\013\007\017\020\021\012\036\010\037\005" +
    "\001\002\000\034\002\ufff5\004\ufff5\005\106\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\013\ufff5\017\ufff5\021\ufff5\022\ufff5" +
    "\036\ufff5\037\ufff5\001\002\000\034\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\013\ufffb\017\ufffb" +
    "\021\ufffb\022\ufffb\036\ufffb\037\ufffb\001\002\000\026\004" +
    "\013\006\021\007\004\010\006\011\016\013\007\017\020" +
    "\021\012\036\010\037\005\001\002\000\034\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\013\ufff4" +
    "\017\ufff4\021\ufff4\022\ufff4\036\ufff4\037\ufff4\001\002\000" +
    "\030\004\013\006\021\007\004\010\006\011\016\013\007" +
    "\017\020\021\012\022\111\036\010\037\005\001\002\000" +
    "\034\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\013\ufff6\017\ufff6\021\ufff6\022\ufff6\036\ufff6\037" +
    "\ufff6\001\002\000\036\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\020\uffef\024\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\034\uffef\035\uffef\001\002\000\012\013\007" +
    "\017\020\036\010\037\005\001\002\000\014\012\040\013" +
    "\033\014\035\015\042\024\115\001\002\000\014\013\007" +
    "\017\030\025\027\036\010\037\005\001\002\000\010\024" +
    "\117\034\057\035\061\001\002\000\012\013\007\017\020" +
    "\036\010\037\005\001\002\000\014\012\040\013\033\014" +
    "\035\015\042\020\121\001\002\000\026\004\013\006\021" +
    "\007\004\010\006\011\016\013\007\017\020\021\012\036" +
    "\010\037\005\001\002\000\034\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\011\ufff8\013\ufff8\017\ufff8\021" +
    "\ufff8\022\ufff8\036\ufff8\037\ufff8\001\002\000\012\013\007" +
    "\017\020\036\010\037\005\001\002\000\036\012\040\013" +
    "\033\014\035\015\042\020\uffed\024\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\001" +
    "\002\000\014\013\007\017\030\025\027\036\010\037\005" +
    "\001\002\000\010\020\127\034\057\035\061\001\002\000" +
    "\026\004\013\006\021\007\004\010\006\011\016\013\007" +
    "\017\020\021\012\036\010\037\005\001\002\000\034\002" +
    "\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\013\ufffa\017\ufffa\021\ufffa\022\ufffa\036\ufffa\037\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\012\002\021\003\014\004\010\007\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\107\004\010\007\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\077\007\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\071" +
    "\001\001\000\006\004\023\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\030\007\031\001\001\000\006\006\070\007" +
    "\031\001\001\000\006\006\064\007\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\055\001\001\000" +
    "\004\007\054\001\001\000\004\007\053\001\001\000\004" +
    "\007\052\001\001\000\004\007\051\001\001\000\004\007" +
    "\050\001\001\000\004\007\047\001\001\000\004\007\046" +
    "\001\001\000\004\007\045\001\001\000\004\007\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\063\007\031\001\001\000\002\001" +
    "\001\000\006\006\061\007\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\101\007\031\001" +
    "\001\000\002\001\001\000\006\004\103\007\016\001\001" +
    "\000\004\005\104\001\001\000\002\001\001\000\006\004" +
    "\106\007\016\001\001\000\002\001\001\000\006\004\077" +
    "\007\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\113\001\001\000\002\001\001\000\006\006\115" +
    "\007\031\001\001\000\002\001\001\000\004\007\117\001" +
    "\001\000\002\001\001\000\006\004\121\007\016\001\001" +
    "\000\002\001\001\000\004\007\123\001\001\000\002\001" +
    "\001\000\006\006\125\007\031\001\001\000\002\001\001" +
    "\000\006\004\127\007\016\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private static class Expr{
		private String str;
		private String valor;
		public Expr (String a, String b){
			str=a;
			valor=b;
		}
		public String str() {
			return str;
		}
		public String valor() {
			return valor;
		}		 
	}
	private static class Cond{
		private String str;
		private String et1;
		private String et2;
		public Cond (String a,String b,String c){
			str=a;
			et1=b;
			et2=c;
		}
		public String str() {
			return str;
		}
		public String et1() {
			return et1;
		}
		public String et2() {
			return et2;
		}
	}
	static int contador = 0;
	static int num = 0;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Condicion ::= AP Condicion CP 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Condicion ::= Condicion OR Condicion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Condicion ::= Condicion AND Condicion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Condicion ::= NOT Condicion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Condicion ::= Expresion GE Expresion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Condicion ::= Expresion GT Expresion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Condicion ::= Expresion LE Expresion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Condicion ::= Expresion LT Expresion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Condicion ::= Expresion NEQ Expresion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Condicion ::= Expresion EQ Expresion 
            {
              Cond RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expresion ::= ENTERO 
            {
              Expr RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Expr(null,num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expresion ::= IDENT 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Expr(null,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expresion ::= IDENT IGUAL Expresion 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Expr(id+" = "+expr.valor(),id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expresion ::= AP Expresion CP 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expresion ::= MENOS Expresion 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expresion ::= Expresion DIV Expresion 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expresion ::= Expresion POR Expresion 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expresion ::= Expresion MENOS Expresion 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expresion ::= Expresion MAS Expresion 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parteELSE ::= ELSE Sentencia 
            {
              String RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "L"+(num)+":\n"+sent+"L"+(num); num++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parteELSE ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sentencia ::= AC Lista_de_sent CC 
            {
              String RESULT =null;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lsent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = lsent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia ::= PRINT AP Expresion CP PYC 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = "print "+expr.valor()+";"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia ::= FOR AP Expresion PYC Condicion PYC Expresion CP Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia ::= DO Sentencia WHILE AP Condicion CP PYC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Sentencia ::= WHILE AP Condicion CP Sentencia 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= IF AP Condicion CP Sentencia parteELSE 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Cond cond = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String els = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RETURN = "if ("+cond.nCond()+") goto L"+num+";\n"+sent+els; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Expresion PYC 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expr.str()+";\n"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              String RESULT =null;
		int lsentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String lsent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lsent+sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= Sentencia 
            {
              String RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= Lista_de_sent 
            {
              Object RESULT =null;
		int lsenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lsenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lsen = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lsen; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

