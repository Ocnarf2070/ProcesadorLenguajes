
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 09 20:21:59 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 09 20:21:59 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\004\002\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\024\002\000\002\005\006\000" +
    "\002\006\004\000\002\006\004\000\002\025\002\000\002" +
    "\026\002\000\002\006\012\000\002\027\002\000\002\030" +
    "\002\000\002\006\011\000\002\031\002\000\002\006\012" +
    "\000\002\032\002\000\002\033\002\000\002\034\002\000" +
    "\002\006\016\000\002\035\002\000\002\036\002\000\002" +
    "\006\013\000\002\006\007\000\002\037\002\000\002\017" +
    "\005\000\002\017\005\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\012\003\000" +
    "\002\013\003\000\002\014\003\000\002\011\003\000\002" +
    "\022\002\000\002\022\004\000\002\007\002\000\002\007" +
    "\004\000\002\016\005\000\002\016\003\000\002\023\003" +
    "\000\002\015\003\000\002\015\004\000\002\015\004\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\015\003\000\002\015\004" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\015\004\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\004\000\002\040\002" +
    "\000\002\010\006\000\002\041\002\000\002\010\006\000" +
    "\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\054\002\ufffe\003\004\004\ufffe\005\ufffe\006" +
    "\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\020\ufffe" +
    "\022\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\034\ufffe\041" +
    "\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\222\001\002\000\052\002\001\004" +
    "\013\005\016\006\031\007\012\010\022\012\026\013\015" +
    "\014\044\020\034\022\007\027\010\030\036\031\041\032" +
    "\024\034\030\041\020\052\042\053\017\054\011\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\004\054\011\001\002\000\060\012\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\033\uffd5\036\uffd5\037\uffd5\040\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5" +
    "\051\uffd5\001\002\000\030\006\031\007\012\022\007\027" +
    "\010\030\036\031\041\032\024\041\020\052\042\053\017" +
    "\054\011\001\002\000\004\054\uffe3\001\002\000\004\032" +
    "\ufff3\001\002\000\004\032\uffdd\001\002\000\004\054\uffe2" +
    "\001\002\000\052\012\uffc9\015\uffc9\016\uffc9\017\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\033\uffc9\037\uffc9" +
    "\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047" +
    "\uffc9\050\uffc9\051\uffc9\001\002\000\030\006\031\007\012" +
    "\022\007\027\010\030\036\031\041\032\024\041\020\052" +
    "\042\053\017\054\011\001\002\000\016\021\050\022\051" +
    "\023\053\024\052\026\047\037\207\001\002\000\004\032" +
    "\uffdf\001\002\000\004\054\uffe6\001\002\000\030\006\031" +
    "\007\012\022\007\027\010\030\036\031\041\032\024\041" +
    "\020\052\042\053\017\054\011\001\002\000\006\037\201" +
    "\040\200\001\002\000\050\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\012\uffde\013\uffde\014\uffde\020\uffde\022\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\034\uffde\041\uffde\052" +
    "\uffde\053\uffde\054\uffde\001\002\000\052\012\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026" +
    "\uffd4\033\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000" +
    "\052\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\020\ufffa\022\ufffa\027\ufffa\030\ufffa\031" +
    "\ufffa\032\ufffa\034\ufffa\035\ufffa\041\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\001\002\000\030\006\031\007\012\022\007\027" +
    "\010\030\036\031\041\032\024\041\020\052\042\053\017" +
    "\054\011\001\002\000\004\032\163\001\002\000\054\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\020\ufffd\022\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\034\ufffd\035\ufffd\041\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\001\002\000\004\032\157\001\002\000\050\004" +
    "\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\020\ufff0\022\ufff0\027\ufff0\030\ufff0\031\ufff0\032" +
    "\ufff0\034\ufff0\041\ufff0\052\ufff0\053\ufff0\054\ufff0\001\002" +
    "\000\004\054\011\001\002\000\060\012\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\026\uffd6" +
    "\027\145\030\144\033\uffd6\036\143\037\uffd6\040\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\001\002\000\030\006\031\007\012\022\007\027" +
    "\010\030\036\031\041\032\062\041\020\052\042\053\017" +
    "\054\011\001\002\000\030\006\031\007\012\022\007\027" +
    "\010\030\036\031\041\032\024\041\020\052\042\053\017" +
    "\054\011\001\002\000\052\012\uffca\015\uffca\016\uffca\017" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\033\uffca" +
    "\037\uffca\040\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\001\002\000\056\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\020\ufffb\022\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\034\ufffb\035\ufffb\041\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\001\002\000\030\006\uffdc\007\uffdc\022\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\041\uffdc\052\uffdc\053" +
    "\uffdc\054\uffdc\001\002\000\056\002\ufffc\004\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\020\ufffc\022\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\034\ufffc\035\ufffc\041\ufffc\052\ufffc\053\ufffc\054\ufffc\001" +
    "\002\000\052\012\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\026\uffc3\033\uffc3\037\uffc3\040" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\050\uffc3\051\uffc3\001\002\000\030\006\031\007\012\022" +
    "\007\027\010\030\036\031\041\032\024\041\020\052\042" +
    "\053\017\054\011\001\002\000\030\006\031\007\012\022" +
    "\007\027\010\030\036\031\041\032\024\041\020\052\042" +
    "\053\017\054\011\001\002\000\030\006\031\007\012\022" +
    "\007\027\010\030\036\031\041\032\024\041\020\052\042" +
    "\053\017\054\011\001\002\000\030\006\031\007\012\022" +
    "\007\027\010\030\036\031\041\032\024\041\020\052\042" +
    "\053\017\054\011\001\002\000\030\006\031\007\012\022" +
    "\007\027\010\030\036\031\041\032\024\041\020\052\042" +
    "\053\017\054\011\001\002\000\052\012\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf" +
    "\033\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\001\002\000\052" +
    "\012\uffce\015\uffce\016\uffce\017\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\026\uffce\033\uffce\037\uffce\040\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\001\002\000\052\012\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\023\053\024\052\026\047\033\uffd0\037" +
    "\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\001\002\000\052\012\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\053\024\052" +
    "\026\047\033\uffd1\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002" +
    "\000\052\012\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\026\uffcc\033\uffcc\037\uffcc\040\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050" +
    "\uffcc\051\uffcc\001\002\000\020\015\130\016\132\021\050" +
    "\022\051\023\053\024\052\026\047\001\002\000\030\006" +
    "\031\007\012\022\007\027\010\030\036\031\041\032\024" +
    "\041\020\052\042\053\017\054\011\001\002\000\020\021" +
    "\050\022\051\023\053\024\052\026\047\033\064\037\065" +
    "\001\002\000\052\012\uffcb\015\uffcb\016\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\033\uffcb\037\uffcb" +
    "\040\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\001\002\000\030\006\uffee\007\uffee" +
    "\022\uffee\027\uffee\030\uffee\031\uffee\032\uffee\041\uffee\052" +
    "\uffee\053\uffee\054\uffee\001\002\000\030\006\031\007\012" +
    "\022\007\027\010\030\036\031\041\032\072\041\070\052" +
    "\042\053\017\054\011\001\002\000\030\021\050\022\051" +
    "\023\053\024\052\026\047\042\106\043\105\044\107\045" +
    "\104\046\111\047\110\001\002\000\030\006\031\007\012" +
    "\022\007\027\010\030\036\031\041\032\072\041\070\052" +
    "\042\053\017\054\011\001\002\000\010\037\120\050\075" +
    "\051\077\001\002\000\030\006\031\007\012\022\007\027" +
    "\010\030\036\031\041\032\072\041\070\052\042\053\017" +
    "\054\011\001\002\000\032\021\050\022\051\023\053\024" +
    "\052\026\047\033\064\042\106\043\105\044\107\045\104" +
    "\046\111\047\110\001\002\000\010\033\076\050\075\051" +
    "\077\001\002\000\030\006\uffbb\007\uffbb\022\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\032\uffbb\041\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\001\002\000\012\033\uffb7\037\uffb7\050\uffb7\051\uffb7" +
    "\001\002\000\030\006\uffb9\007\uffb9\022\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\041\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\001\002\000\030\006\031\007\012\022\007\027\010\030" +
    "\036\031\041\032\072\041\070\052\042\053\017\054\011" +
    "\001\002\000\012\033\uffb8\037\uffb8\050\075\051\077\001" +
    "\002\000\030\006\031\007\012\022\007\027\010\030\036" +
    "\031\041\032\072\041\070\052\042\053\017\054\011\001" +
    "\002\000\012\033\uffba\037\uffba\050\075\051\uffba\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\030\006\031\007\012\022\007\027\010\030\036\031" +
    "\041\032\024\041\020\052\042\053\017\054\011\001\002" +
    "\000\024\021\050\022\051\023\053\024\052\026\047\033" +
    "\uffc0\037\uffc0\050\uffc0\051\uffc0\001\002\000\024\021\050" +
    "\022\051\023\053\024\052\026\047\033\uffbe\037\uffbe\050" +
    "\uffbe\051\uffbe\001\002\000\024\021\050\022\051\023\053" +
    "\024\052\026\047\033\uffbf\037\uffbf\050\uffbf\051\uffbf\001" +
    "\002\000\024\021\050\022\051\023\053\024\052\026\047" +
    "\033\uffc2\037\uffc2\050\uffc2\051\uffc2\001\002\000\024\021" +
    "\050\022\051\023\053\024\052\026\047\033\uffc1\037\uffc1" +
    "\050\uffc1\051\uffc1\001\002\000\024\021\050\022\051\023" +
    "\053\024\052\026\047\033\uffbd\037\uffbd\050\uffbd\051\uffbd" +
    "\001\002\000\030\006\uffed\007\uffed\022\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\041\uffed\052\uffed\053\uffed\054\uffed" +
    "\001\002\000\030\006\031\007\012\022\007\027\010\030" +
    "\036\031\041\032\024\041\020\052\042\053\017\054\011" +
    "\001\002\000\016\021\050\022\051\023\053\024\052\026" +
    "\047\033\123\001\002\000\050\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\020\uffec\022" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\034\uffec\041\uffec" +
    "\052\uffec\053\uffec\054\uffec\001\002\000\050\004\013\005" +
    "\016\006\031\007\012\010\022\012\026\013\015\014\044" +
    "\020\034\022\007\027\010\030\036\031\041\032\024\034" +
    "\030\041\020\052\042\053\017\054\011\001\002\000\056" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\020\uffeb\022\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\041\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\001\002\000\032\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\026\uffc4\033\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\001\002\000\012\033\uffbc" +
    "\037\uffbc\050\uffbc\051\uffbc\001\002\000\030\006\uffe1\007" +
    "\uffe1\022\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\041\uffe1" +
    "\052\uffe1\053\uffe1\054\uffe1\001\002\000\030\006\031\007" +
    "\012\022\007\027\010\030\036\031\041\032\024\041\020" +
    "\052\042\053\017\054\011\001\002\000\030\006\uffe0\007" +
    "\uffe0\022\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\041\uffe0" +
    "\052\uffe0\053\uffe0\054\uffe0\001\002\000\020\012\uffea\017" +
    "\uffea\021\050\022\051\023\053\024\052\026\047\001\002" +
    "\000\006\012\uffdb\017\135\001\002\000\030\006\031\007" +
    "\012\022\007\027\010\030\036\031\041\032\024\041\020" +
    "\052\042\053\017\054\011\001\002\000\004\012\uffe9\001" +
    "\002\000\004\012\140\001\002\000\050\004\013\005\016" +
    "\006\031\007\012\010\022\012\026\013\015\014\044\020" +
    "\034\022\007\027\010\030\036\031\041\032\024\034\030" +
    "\041\020\052\042\053\017\054\011\001\002\000\056\002" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\020\uffe8\022\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\041\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\001\002\000\016\012\uffda\021\050\022" +
    "\051\023\053\024\052\026\047\001\002\000\030\006\031" +
    "\007\012\022\007\027\010\030\036\031\041\032\024\041" +
    "\020\052\042\053\017\054\011\001\002\000\052\012\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\026\uffc5\033\uffc5\037\uffc5\040\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001" +
    "\002\000\052\012\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\026\uffc8\033\uffc8\037\uffc8\040" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\001\002\000\052\012\uffd7\015\uffd7\016" +
    "\uffd7\017\uffd7\021\050\022\051\023\053\024\052\026\047" +
    "\033\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000\052" +
    "\012\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\024\uffc6\026\uffc6\033\uffc6\037\uffc6\040\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\001\002\000\050\004\013\005\016\006\031\007\012" +
    "\010\022\012\026\013\015\014\044\020\034\022\007\027" +
    "\010\030\036\031\041\032\024\034\030\041\020\052\042" +
    "\053\017\054\011\001\002\000\004\013\152\001\002\000" +
    "\004\032\153\001\002\000\030\006\031\007\012\022\007" +
    "\027\010\030\036\031\041\032\072\041\070\052\042\053" +
    "\017\054\011\001\002\000\010\033\155\050\075\051\077" +
    "\001\002\000\004\037\156\001\002\000\056\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\020\uffef\022\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\034\uffef\035\uffef\041\uffef\052\uffef\053\uffef" +
    "\054\uffef\001\002\000\030\006\031\007\012\022\007\027" +
    "\010\030\036\031\041\032\024\041\020\052\042\053\017" +
    "\054\011\001\002\000\016\021\050\022\051\023\053\024" +
    "\052\026\047\033\161\001\002\000\004\037\162\001\002" +
    "\000\056\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\020\uffe7\022\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\041" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\001\002\000\030\006\031" +
    "\007\012\022\007\027\010\030\036\031\041\032\072\041" +
    "\070\052\042\053\017\054\011\001\002\000\010\033\ufff6" +
    "\050\075\051\077\001\002\000\004\033\166\001\002\000" +
    "\050\004\013\005\016\006\031\007\012\010\022\012\026" +
    "\013\015\014\044\020\034\022\007\027\010\030\036\031" +
    "\041\032\024\034\030\041\020\052\042\053\017\054\011" +
    "\001\002\000\056\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\020\ufff5" +
    "\022\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\034\ufff5\035" +
    "\ufff5\041\ufff5\052\ufff5\053\ufff5\054\ufff5\001\002\000\056" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\172\012\uffd9\013\uffd9\014\uffd9\020\uffd9\022\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\041\uffd9\052" +
    "\uffd9\053\uffd9\054\uffd9\001\002\000\056\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\020\ufff4\022\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\034\ufff4\035\ufff4\041\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\001\002\000\050\004\013\005\016\006\031\007\012" +
    "\010\022\012\026\013\015\014\044\020\034\022\007\027" +
    "\010\030\036\031\041\032\024\034\030\041\020\052\042" +
    "\053\017\054\011\001\002\000\056\002\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\020\uffd8\022\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\034\uffd8\035\uffd8\041\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\001\002\000\052\012\uffd3\015\uffd3\016\uffd3\017\uffd3\021" +
    "\050\022\051\023\053\024\052\026\047\033\uffd3\037\uffd3" +
    "\040\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047" +
    "\uffd3\050\uffd3\051\uffd3\001\002\000\052\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\012\ufffe\013\ufffe\014\ufffe\020" +
    "\ufffe\022\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\034\ufffe" +
    "\035\ufffe\041\ufffe\052\ufffe\053\ufffe\054\ufffe\001\002\000" +
    "\052\004\013\005\016\006\031\007\012\010\022\012\026" +
    "\013\015\014\044\020\034\022\007\027\010\030\036\031" +
    "\041\032\024\034\030\035\177\041\020\052\042\053\017" +
    "\054\011\001\002\000\056\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\020\ufff9\022\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\034" +
    "\ufff9\035\ufff9\041\ufff9\052\ufff9\053\ufff9\054\ufff9\001\002" +
    "\000\004\054\011\001\002\000\056\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\020\ufff8\022\ufff8\027\ufff8\030\ufff8\031\ufff8\032" +
    "\ufff8\034\ufff8\035\ufff8\041\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\001\002\000\010\036\143\037\uffd6\040\uffd6\001\002\000" +
    "\006\037\uffe4\040\uffe4\001\002\000\016\021\050\022\051" +
    "\023\053\024\052\026\047\033\064\001\002\000\004\054" +
    "\011\001\002\000\006\037\uffe5\040\uffe5\001\002\000\056" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\020\ufff7\022\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\041\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\001\002\000\052\012\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\026" +
    "\uffc4\033\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\001\002\000" +
    "\004\032\212\001\002\000\030\006\031\007\012\022\007" +
    "\027\010\030\036\031\041\032\072\041\070\052\042\053" +
    "\017\054\011\001\002\000\010\033\214\050\075\051\077" +
    "\001\002\000\050\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\020\ufff2\022\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\034\ufff2\041\ufff2\052\ufff2\053" +
    "\ufff2\054\ufff2\001\002\000\050\004\013\005\016\006\031" +
    "\007\012\010\022\012\026\013\015\014\044\020\034\022" +
    "\007\027\010\030\036\031\041\032\024\034\030\041\020" +
    "\052\042\053\017\054\011\001\002\000\056\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\020\ufff1\022\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\034\ufff1\035\ufff1\041\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\001\002\000\052\012\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\021\050\022\051\023\053\024\052\026\047\033\uffd2" +
    "\037\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002\000\052\012\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\026\uffc7\033\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\001" +
    "\002\000\052\012\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\026\uffcd\033\uffcd\037\uffcd\040" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\032\005\042\006\044" +
    "\011\037\012\031\013\034\014\013\015\020\016\026\017" +
    "\024\020\022\023\036\001\001\000\010\015\220\016\026" +
    "\023\036\001\001\000\004\023\217\001\001\000\002\001" +
    "\001\000\010\015\216\016\026\023\036\001\001\000\002" +
    "\001\001\000\004\027\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\207\016\026" +
    "\023\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\204\001\001\000\010\015\203\016\026\023\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\174\001\001\000\010\015\173\016\026" +
    "\023\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\147\001\001\000\004\023\146" +
    "\001\001\000\002\001\001\000\010\015\060\016\026\023" +
    "\036\001\001\000\010\015\045\016\026\023\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\057\016\026" +
    "\023\036\001\001\000\010\015\056\016\026\023\036\001" +
    "\001\000\010\015\055\016\026\023\036\001\001\000\010" +
    "\015\054\016\026\023\036\001\001\000\010\015\053\016" +
    "\026\023\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\130\001\001\000\010\015\062\016\026\023\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\065\001\001\000\012\010\070\015\066\016\026\023\036" +
    "\001\001\000\002\001\001\000\012\010\126\015\125\016" +
    "\026\023\036\001\001\000\002\001\001\000\012\010\073" +
    "\015\072\016\026\023\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\101\001\001\000\002\001\001" +
    "\000\004\041\077\001\001\000\012\010\100\015\066\016" +
    "\026\023\036\001\001\000\002\001\001\000\012\010\102" +
    "\015\066\016\026\023\036\001\001\000\002\001\001\000" +
    "\010\015\116\016\026\023\036\001\001\000\010\015\115" +
    "\016\026\023\036\001\001\000\010\015\114\016\026\023" +
    "\036\001\001\000\010\015\113\016\026\023\036\001\001" +
    "\000\010\015\112\016\026\023\036\001\001\000\010\015" +
    "\111\016\026\023\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\120\001\001\000\010" +
    "\015\121\016\026\023\036\001\001\000\002\001\001\000" +
    "\004\034\123\001\001\000\032\003\124\005\042\006\044" +
    "\011\037\012\031\013\034\014\013\015\020\016\026\017" +
    "\024\020\022\023\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\132\016\026\023\036\001\001\000\002\001\001\000\004" +
    "\035\133\001\001\000\004\022\135\001\001\000\010\015" +
    "\141\016\026\023\036\001\001\000\004\036\136\001\001" +
    "\000\002\001\001\000\032\003\140\005\042\006\044\011" +
    "\037\012\031\013\034\014\013\015\020\016\026\017\024" +
    "\020\022\023\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\145\016\026\023\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\150\005\042\006\044\011\037\012\031" +
    "\013\034\014\013\015\020\016\026\017\024\020\022\023" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\153\015\066\016\026\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\157" +
    "\016\026\023\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\163\015\066\016\026" +
    "\023\036\001\001\000\004\025\164\001\001\000\002\001" +
    "\001\000\032\003\166\005\042\006\044\011\037\012\031" +
    "\013\034\014\013\015\020\016\026\017\024\020\022\023" +
    "\036\001\001\000\004\026\167\001\001\000\004\007\170" +
    "\001\001\000\002\001\001\000\032\003\172\005\042\006" +
    "\044\011\037\012\031\013\034\014\013\015\020\016\026" +
    "\017\024\020\022\023\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\175\001\001\000\032\003\032" +
    "\005\042\006\044\011\037\012\031\013\034\014\013\015" +
    "\020\016\026\017\024\020\022\023\036\001\001\000\002" +
    "\001\001\000\006\016\202\023\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\205\023\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\010\212\015\066\016\026\023\036\001\001\000\002\001" +
    "\001\000\004\030\214\001\001\000\032\003\215\005\042" +
    "\006\044\011\037\012\031\013\034\014\013\015\020\016" +
    "\026\017\024\020\022\023\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	boolean asigTipo=false;
	EtiquetaDoble aux;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condicion ::= AP Condicion CP 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condicion ::= Condicion OR NT$13 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   GenCod.label(c.v()); 
				   GenCod.goTo(d.v());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$13 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(c.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Condicion ::= Condicion AND NT$12 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   GenCod.label(c.f());
				   GenCod.goTo(d.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$12 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(c.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Condicion ::= NOT Condicion 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				String temp = c.v();
				c.setV(c.f());
				c.setF(temp);
				RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= Expresion GE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.GTE,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Expresion GT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.GT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Condicion ::= Expresion LE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.LTE,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Expresion LT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.LT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Condicion ::= Expresion NEQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.NEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condicion ::= Expresion EQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = GenCod.condicion(e1,If.EQ,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion ::= CAMBIO Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.Change(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion ::= NOT Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.Up(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion ::= Variable DMENOS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 GenCod.Double(id,"-",false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion ::= DMENOS Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenCod.Double(id,"-",true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion ::= DMAS Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenCod.Double(id,"+",true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion ::= Variable DMAS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 GenCod.Double(id,"+",false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= CHARACTER 
            {
              String RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT="0"+ch; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(exp1.length()>1&&exp1.charAt(0)=='0')exp1=exp1.substring(1);
				if(exp2.length()>1&&exp2.charAt(0)=='0')exp2=exp2.substring(1);
				RESULT=GenCod.mod(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(exp.length()>1&&exp.charAt(0)=='0')exp=exp.substring(1);
				RESULT=GenCod.mod("0",exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(exp1.length()>1&&exp1.charAt(0)=='0')exp1=exp1.substring(1);
				if(exp2.length()>1&&exp2.charAt(0)=='0')exp2=exp2.substring(1);
				RESULT=GenCod.div(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(exp1.length()>1&&exp1.charAt(0)=='0')exp1=exp1.substring(1);
				if(exp2.length()>1&&exp2.charAt(0)=='0')exp2=exp2.substring(1);
				RESULT=GenCod.por(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(exp1.length()>1&&exp1.charAt(0)=='0')exp1=exp1.substring(1);
				if(exp2.length()>1&&exp2.charAt(0)=='0')exp2=exp2.substring(1);
				RESULT=GenCod.menos(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(exp1.length()>1&&exp1.charAt(0)=='0')exp1=exp1.substring(1);
				if(exp2.length()>1&&exp2.charAt(0)=='0')exp2=exp2.substring(1);
				RESULT=GenCod.mas(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= CINT Expresion 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(var.length()>1&&var.charAt(0)=='0')var=var.substring(1); RESULT=var; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= CCHAR Expresion 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT='0'+var;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= ExpresionAsig 
            {
              String RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=expr; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Variable ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(asigTipo) RESULT=id;
				else{
					if(TablaSimbolo.existe(id)) RESULT = id;
					else GenCod.error();
				}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpresionAsig ::= Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsig",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpresionAsig ::= Variable IGUAL Expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(asigTipo)GenCod.asigN(id,expr); 
					else GenCod.asig(id,expr);
					RESULT=id; 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsig",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parteELSE ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parteELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Pasos ::= STEP Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pasos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Pasos ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pasos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AFor ::= FOR 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(GenCod.getLabel(),GenCod.getLabel()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AWhile ::= WHILE 
            {
              String RESULT =null;
		 RESULT=GenCod.getLabel();; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ADo ::= DO 
            {
              String RESULT =null;
		 RESULT=GenCod.getLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ADo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AIf ::= IF 
            {
              String RESULT =null;
		 RESULT= GenCod.getLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Modo ::= DOWNTO 
            {
              Boolean RESULT =null;
		
		RESULT = false;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Modo ::= TO 
            {
              Boolean RESULT =null;
		
		RESULT = true;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Tipo ::= CHAR 
            {
              Integer RESULT =null;
		 RESULT=Tipo.CHAR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Tipo ::= INT 
            {
              Integer RESULT =null;
		 RESULT=Tipo.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // List_declar_var ::= List_declar_var COMA ExpresionAsig 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = type;
					Simbolo sb = new Simbolo(null,type,TablaSimbolo.indice());
					TablaSimbolo.addSimb(id,sb);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // List_declar_var ::= Tipo NT$11 ExpresionAsig 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = type;
					Simbolo sb = new Simbolo(null,type,TablaSimbolo.indice());
					TablaSimbolo.addSimb(id,sb);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$11 ::= 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 asigTipo=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Sentencia_simp ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				GenCod.print(expr);				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia_simp ::= AFor Expresion Modo Expresion NT$9 Pasos NT$10 DO Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				GenCod.goTo(f.f());
				GenCod.label(aux.f() );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				String paso = num==null?"1":num;
				if(m)GenCod.asig(exp1,exp1+" + "+paso);
				else GenCod.asig(exp1,exp1+" - "+paso);
				GenCod.goTo(f.v());
				GenCod.label(aux.v());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$9 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				GenCod.label(f.v());
				if(m) aux=GenCod.condicion(exp2,If.LT,exp1);
				else aux=GenCod.condicion(exp1,If.LT,exp2);
				GenCod.label(f.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Sentencia_simp ::= AFor AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion CP NT$8 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 GenCod.goTo(afor.f());
				   GenCod.label(c.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 GenCod.goTo(afor.v());
				   GenCod.label(c.v());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(afor.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$6 ::= 
            {
              Object RESULT =null;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 GenCod.label(afor.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Sentencia_simp ::= ADo NT$5 Sentencia WHILE AP Condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ado = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 GenCod.label(c.v());
				   GenCod.goTo(ado);
				   GenCod.label(c.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$5 ::= 
            {
              Object RESULT =null;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ado = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GenCod.label(ado); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Sentencia_simp ::= AWhile NT$3 AP Condicion CP NT$4 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String awhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 GenCod.goTo(awhile);
				   GenCod.label(c.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String awhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(c.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              Object RESULT =null;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String awhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GenCod.label(awhile); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia_simp ::= AIf AP Condicion NT$1 CP Sentencia NT$2 parteELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String aif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 GenCod.label(aif); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String aif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 GenCod.goTo(aif); 
				GenCod.label(cond.f()); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
		int aifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String aif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GenCod.label(cond.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Sentencia_simp ::= Expresion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia_simp ::= List_declar_var PYC 
            {
              Object RESULT =null;
		 asigTipo=false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia_comp ::= AL NT$0 Lista_de_sent CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					TablaSimbolo.limpiar(TablaSimbolo.indice());
					TablaSimbolo.finBloque();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 TablaSimbolo.nuevoBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Sentencia_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Sentencia_simp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= error 
            {
              Object RESULT =null;
		 GenCod.error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_de_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

