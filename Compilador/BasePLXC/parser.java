
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 09 15:37:58 GMT 2018
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 09 15:37:58 GMT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\004\002\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\024\002\000\002\005\006\000" +
    "\002\006\004\000\002\025\002\000\002\026\002\000\002" +
    "\006\012\000\002\027\002\000\002\030\002\000\002\006" +
    "\011\000\002\031\002\000\002\006\012\000\002\032\002" +
    "\000\002\033\002\000\002\034\002\000\002\006\016\000" +
    "\002\035\002\000\002\036\002\000\002\006\013\000\002" +
    "\006\007\000\002\037\002\000\002\017\005\000\002\017" +
    "\005\000\002\020\003\000\002\021\003\000\002\021\003" +
    "\000\002\012\003\000\002\013\003\000\002\014\003\000" +
    "\002\011\003\000\002\022\002\000\002\022\004\000\002" +
    "\007\002\000\002\007\004\000\002\016\005\000\002\016" +
    "\003\000\002\023\003\000\002\015\005\000\002\015\003" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\004\000\002" +
    "\040\002\000\002\010\006\000\002\041\002\000\002\010" +
    "\006\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\024\002\ufffe\003\004\004\ufffe\005\ufffe\007" +
    "\ufffe\010\ufffe\011\ufffe\015\ufffe\030\ufffe\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\206\001\002\000\022\002" +
    "\001\004\010\005\020\007\025\010\007\011\014\015\023" +
    "\030\011\001\002\000\004\026\uffdf\001\002\000\004\047" +
    "\uffe4\001\002\000\022\004\ufffa\005\ufffa\007\ufffa\010\ufffa" +
    "\011\ufffa\015\ufffa\030\ufffa\031\ufffa\001\002\000\004\047" +
    "\uffe7\001\002\000\006\033\174\034\173\001\002\000\016" +
    "\017\uffde\024\uffde\025\uffde\026\uffde\046\uffde\047\uffde\001" +
    "\002\000\004\026\162\001\002\000\026\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\015\ufffc\030" +
    "\ufffc\031\ufffc\001\002\000\024\002\ufffd\004\ufffd\005\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\015\ufffd\030\ufffd\031\ufffd\001" +
    "\002\000\004\026\uffe1\001\002\000\020\004\ufff1\005\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\015\ufff1\030\ufff1\001\002\000" +
    "\016\017\033\024\035\025\041\026\124\046\034\047\032" +
    "\001\002\000\004\026\120\001\002\000\026\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\015\ufffb" +
    "\030\ufffb\031\ufffb\001\002\000\020\004\uffe0\005\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\015\uffe0\030\uffe0\001\002\000\004" +
    "\026\ufff4\001\002\000\004\026\030\001\002\000\020\017" +
    "\033\024\035\025\041\026\042\035\037\046\034\047\032" +
    "\001\002\000\060\007\uffd5\012\uffd5\013\uffd5\014\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\116\025\114" +
    "\027\uffd5\032\115\033\uffd5\034\uffd5\036\uffd5\037\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002" +
    "\000\060\007\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041" +
    "\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\001\002\000\016" +
    "\017\033\024\035\025\041\026\070\046\034\047\032\001" +
    "\002\000\052\007\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\023\uffcd\027\uffcd\033\uffcd\034" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\001\002\000\004\047\032\001\002\000" +
    "\030\016\063\017\054\020\060\021\066\023\057\036\062" +
    "\037\061\040\064\041\056\042\067\043\065\001\002\000" +
    "\020\017\033\024\035\025\041\026\042\035\037\046\034" +
    "\047\032\001\002\000\010\027\106\044\045\045\046\001" +
    "\002\000\004\047\032\001\002\000\020\017\033\024\035" +
    "\025\041\026\042\035\037\046\034\047\032\001\002\000" +
    "\032\016\063\017\054\020\060\021\066\023\057\027\055" +
    "\036\062\037\061\040\064\041\056\042\067\043\065\001" +
    "\002\000\010\027\047\044\045\045\046\001\002\000\020" +
    "\017\uffc1\024\uffc1\025\uffc1\026\uffc1\035\uffc1\046\uffc1\047" +
    "\uffc1\001\002\000\020\017\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\035\uffbf\046\uffbf\047\uffbf\001\002\000\012\027\uffbd\033" +
    "\uffbd\044\uffbd\045\uffbd\001\002\000\020\017\033\024\035" +
    "\025\041\026\042\035\037\046\034\047\032\001\002\000" +
    "\012\027\uffbe\033\uffbe\044\045\045\046\001\002\000\020" +
    "\017\033\024\035\025\041\026\042\035\037\046\034\047" +
    "\032\001\002\000\012\027\uffc0\033\uffc0\044\045\045\uffc0" +
    "\001\002\000\016\017\033\024\035\025\041\026\070\046" +
    "\034\047\032\001\002\000\052\007\uffce\012\uffce\013\uffce" +
    "\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\027" +
    "\uffce\033\uffce\034\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\001\002\000\016\017" +
    "\033\024\035\025\041\026\070\046\034\047\032\001\002" +
    "\000\016\017\033\024\035\025\041\026\070\046\034\047" +
    "\032\001\002\000\016\017\033\024\035\025\041\026\070" +
    "\046\034\047\032\001\002\000\016\017\033\024\035\025" +
    "\041\026\070\046\034\047\032\001\002\000\016\017\033" +
    "\024\035\025\041\026\070\046\034\047\032\001\002\000" +
    "\016\017\033\024\035\025\041\026\070\046\034\047\032" +
    "\001\002\000\016\017\033\024\035\025\041\026\070\046" +
    "\034\047\032\001\002\000\016\017\033\024\035\025\041" +
    "\026\070\046\034\047\032\001\002\000\016\017\033\024" +
    "\035\025\041\026\070\046\034\047\032\001\002\000\016" +
    "\017\033\024\035\025\041\026\070\046\034\047\032\001" +
    "\002\000\016\017\033\024\035\025\041\026\070\046\034" +
    "\047\032\001\002\000\024\016\063\017\054\020\060\021" +
    "\066\023\057\027\uffc6\033\uffc6\044\uffc6\045\uffc6\001\002" +
    "\000\016\016\063\017\054\020\060\021\066\023\057\027" +
    "\055\001\002\000\052\007\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\027\uffd1\033" +
    "\uffd1\034\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\001\002\000\024\016\063\017" +
    "\054\020\060\021\066\023\057\027\uffc4\033\uffc4\044\uffc4" +
    "\045\uffc4\001\002\000\024\016\063\017\054\020\060\021" +
    "\066\023\057\027\uffc5\033\uffc5\044\uffc5\045\uffc5\001\002" +
    "\000\052\007\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\017" +
    "\uffd4\020\060\021\066\023\057\027\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\001\002\000\024\016\063\017\054\020\060" +
    "\021\066\023\057\027\uffc8\033\uffc8\044\uffc8\045\uffc8\001" +
    "\002\000\024\016\063\017\054\020\060\021\066\023\057" +
    "\027\uffc7\033\uffc7\044\uffc7\045\uffc7\001\002\000\052\007" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\023\uffd2\027\uffd2\033\uffd2\034\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\001\002\000\052\007\uffcf\012\uffcf\013\uffcf\014\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\027\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\001\002\000\024\016\063\017\054" +
    "\020\060\021\066\023\057\027\uffc3\033\uffc3\044\uffc3\045" +
    "\uffc3\001\002\000\052\007\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\016\uffd3\017\uffd3\020\060\021\066\023\057\027\uffd3\033" +
    "\uffd3\034\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\001\002\000\052\007\uffca\012" +
    "\uffca\013\uffca\014\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\023\uffca\027\uffca\033\uffca\034\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\001\002" +
    "\000\020\004\ufff3\005\ufff3\007\ufff3\010\ufff3\011\ufff3\015" +
    "\ufff3\030\ufff3\001\002\000\020\004\010\005\020\007\025" +
    "\010\007\011\014\015\023\030\011\001\002\000\026\002" +
    "\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\015\ufff2\030\ufff2\031\ufff2\001\002\000\012\027\uffc2\033" +
    "\uffc2\044\uffc2\045\uffc2\001\002\000\052\007\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023" +
    "\uffcb\027\uffcb\033\uffcb\034\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\001\002\000" +
    "\052\007\uffd0\012\uffd0\013\uffd0\014\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\023\uffd0\027\uffd0\033\uffd0\034\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\001\002\000\052\007\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9\027\uffc9" +
    "\033\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\045\uffc9\001\002\000\016\017\033" +
    "\024\035\025\041\026\070\046\034\047\032\001\002\000" +
    "\052\007\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\027\uffcc\033\uffcc\034\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\001\002\000\052\007\uffd6\012\uffd6\013\uffd6\014" +
    "\uffd6\016\063\017\054\020\060\021\066\023\057\027\uffd6" +
    "\033\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000\016\017\033" +
    "\024\035\025\041\026\070\046\034\047\032\001\002\000" +
    "\016\016\063\017\054\020\060\021\066\023\057\027\122" +
    "\001\002\000\004\033\123\001\002\000\026\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\015\uffe8" +
    "\030\uffe8\031\uffe8\001\002\000\016\017\033\024\035\025" +
    "\041\026\070\046\034\047\032\001\002\000\020\012\126" +
    "\013\130\016\063\017\054\020\060\021\066\023\057\001" +
    "\002\000\016\017\uffe3\024\uffe3\025\uffe3\026\uffe3\046\uffe3" +
    "\047\uffe3\001\002\000\016\017\033\024\035\025\041\026" +
    "\070\046\034\047\032\001\002\000\016\017\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\046\uffe2\047\uffe2\001\002\000\020\007" +
    "\uffeb\014\uffeb\016\063\017\054\020\060\021\066\023\057" +
    "\001\002\000\006\007\uffdd\014\134\001\002\000\004\007" +
    "\uffea\001\002\000\016\017\033\024\035\025\041\026\070" +
    "\046\034\047\032\001\002\000\016\007\uffdc\016\063\017" +
    "\054\020\060\021\066\023\057\001\002\000\004\007\137" +
    "\001\002\000\020\004\010\005\020\007\025\010\007\011" +
    "\014\015\023\030\011\001\002\000\026\002\uffe9\004\uffe9" +
    "\005\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\015\uffe9\030" +
    "\uffe9\031\uffe9\001\002\000\020\016\063\017\054\020\060" +
    "\021\066\023\057\027\055\033\142\001\002\000\020\017" +
    "\uffef\024\uffef\025\uffef\026\uffef\035\uffef\046\uffef\047\uffef" +
    "\001\002\000\020\017\033\024\035\025\041\026\042\035" +
    "\037\046\034\047\032\001\002\000\010\033\145\044\045" +
    "\045\046\001\002\000\016\017\uffee\024\uffee\025\uffee\026" +
    "\uffee\046\uffee\047\uffee\001\002\000\016\017\033\024\035" +
    "\025\041\026\070\046\034\047\032\001\002\000\016\016" +
    "\063\017\054\020\060\021\066\023\057\027\150\001\002" +
    "\000\020\004\uffed\005\uffed\007\uffed\010\uffed\011\uffed\015" +
    "\uffed\030\uffed\001\002\000\020\004\010\005\020\007\025" +
    "\010\007\011\014\015\023\030\011\001\002\000\026\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\015\uffec\030\uffec\031\uffec\001\002\000\020\004\010\005" +
    "\020\007\025\010\007\011\014\015\023\030\011\001\002" +
    "\000\004\010\155\001\002\000\004\026\156\001\002\000" +
    "\020\017\033\024\035\025\041\026\042\035\037\046\034" +
    "\047\032\001\002\000\010\027\160\044\045\045\046\001" +
    "\002\000\004\033\161\001\002\000\026\002\ufff0\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\015\ufff0\030" +
    "\ufff0\031\ufff0\001\002\000\020\017\033\024\035\025\041" +
    "\026\042\035\037\046\034\047\032\001\002\000\010\027" +
    "\ufff7\044\045\045\046\001\002\000\004\027\165\001\002" +
    "\000\020\004\010\005\020\007\025\010\007\011\014\015" +
    "\023\030\011\001\002\000\026\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\015\ufff6\030\ufff6\031" +
    "\ufff6\001\002\000\026\002\uffdb\004\uffdb\005\uffdb\006\171" +
    "\007\uffdb\010\uffdb\011\uffdb\015\uffdb\030\uffdb\031\uffdb\001" +
    "\002\000\026\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\015\ufff5\030\ufff5\031\ufff5\001\002\000" +
    "\020\004\010\005\020\007\025\010\007\011\014\015\023" +
    "\030\011\001\002\000\026\002\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\015\uffda\030\uffda\031\uffda" +
    "\001\002\000\004\047\032\001\002\000\026\002\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\015\ufff8" +
    "\030\ufff8\031\ufff8\001\002\000\006\033\uffe5\034\uffe5\001" +
    "\002\000\010\032\177\033\uffd8\034\uffd8\001\002\000\016" +
    "\017\033\024\035\025\041\026\070\046\034\047\032\001" +
    "\002\000\020\016\063\017\054\020\060\021\066\023\057" +
    "\033\uffd9\034\uffd9\001\002\000\004\047\032\001\002\000" +
    "\006\033\uffe6\034\uffe6\001\002\000\022\004\ufffe\005\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\015\ufffe\030\ufffe\031\ufffe\001" +
    "\002\000\022\004\010\005\020\007\025\010\007\011\014" +
    "\015\023\030\011\031\205\001\002\000\026\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9" +
    "\030\ufff9\031\ufff9\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\006\002\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\016\005\023\006\015" +
    "\011\021\012\014\013\020\014\025\017\012\020\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\202" +
    "\001\001\000\004\037\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\152\001\001\000" +
    "\006\015\124\023\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\026\001\001\000" +
    "\002\001\001\000\010\010\037\015\035\023\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\112\023" +
    "\030\001\001\000\002\001\001\000\004\023\111\001\001" +
    "\000\002\001\001\000\010\010\110\015\035\023\030\001" +
    "\001\000\002\001\001\000\004\023\104\001\001\000\010" +
    "\010\043\015\042\023\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\051\001\001\000\004\041\047" +
    "\001\001\000\002\001\001\000\010\010\050\015\035\023" +
    "\030\001\001\000\002\001\001\000\010\010\052\015\035" +
    "\023\030\001\001\000\002\001\001\000\006\015\103\023" +
    "\030\001\001\000\002\001\001\000\006\015\102\023\030" +
    "\001\001\000\006\015\101\023\030\001\001\000\006\015" +
    "\100\023\030\001\001\000\006\015\077\023\030\001\001" +
    "\000\006\015\076\023\030\001\001\000\006\015\075\023" +
    "\030\001\001\000\006\015\074\023\030\001\001\000\006" +
    "\015\073\023\030\001\001\000\006\015\072\023\030\001" +
    "\001\000\006\015\070\023\030\001\001\000\006\015\071" +
    "\023\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\106\001\001\000\024\003" +
    "\107\005\023\006\015\011\021\012\014\013\020\014\025" +
    "\017\012\020\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\116\023\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\120\023\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\140\023\030\001\001\000\004\021\126\001\001\000\002" +
    "\001\001\000\006\015\130\023\030\001\001\000\002\001" +
    "\001\000\004\035\131\001\001\000\004\022\132\001\001" +
    "\000\004\036\135\001\001\000\006\015\134\023\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\137" +
    "\005\023\006\015\011\021\012\014\013\020\014\025\017" +
    "\012\020\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\142\001\001\000\010\010\143\015\035\023" +
    "\030\001\001\000\002\001\001\000\004\033\145\001\001" +
    "\000\006\015\146\023\030\001\001\000\002\001\001\000" +
    "\004\034\150\001\001\000\024\003\151\005\023\006\015" +
    "\011\021\012\014\013\020\014\025\017\012\020\011\001" +
    "\001\000\002\001\001\000\024\003\153\005\023\006\015" +
    "\011\021\012\014\013\020\014\025\017\012\020\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\156" +
    "\015\035\023\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\162\015\035\023\030" +
    "\001\001\000\004\025\163\001\001\000\002\001\001\000" +
    "\024\003\165\005\023\006\015\011\021\012\014\013\020" +
    "\014\025\017\012\020\011\001\001\000\004\026\166\001" +
    "\001\000\004\007\167\001\001\000\002\001\001\000\024" +
    "\003\171\005\023\006\015\011\021\012\014\013\020\014" +
    "\025\017\012\020\011\001\001\000\002\001\001\000\006" +
    "\016\174\023\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\177\023\030\001\001" +
    "\000\002\001\001\000\006\016\201\023\175\001\001\000" +
    "\002\001\001\000\004\004\203\001\001\000\024\003\016" +
    "\005\023\006\015\011\021\012\014\013\020\014\025\017" +
    "\012\020\011\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	boolean asigTipo=false;
	EtiquetaDoble aux;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Condicion ::= AP Condicion CP 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Condicion ::= Condicion OR NT$13 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   GenCod.label(c.v()); 
				   GenCod.goTo(d.v());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$13 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(c.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Condicion ::= Condicion AND NT$12 Condicion 
            {
              EtiquetaDoble RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (EtiquetaDoble) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble d = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=d; 
				   GenCod.label(c.f());
				   GenCod.goTo(d.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$12 ::= 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(c.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Condicion ::= NOT Condicion 
            {
              EtiquetaDoble RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				String temp = c.v();
				c.setV(c.f());
				c.setF(temp);
				RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Condicion ::= Expresion GE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.GTE,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Condicion ::= Expresion GT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.GT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Condicion ::= Expresion LE Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.LTE,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Condicion ::= Expresion LT Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.LT,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Condicion ::= Expresion NEQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = GenCod.condicion(e1,If.NEQ,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Condicion ::= Expresion EQ Expresion 
            {
              EtiquetaDoble RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = GenCod.condicion(e1,If.EQ,e2);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion ::= Variable DMENOS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 GenCod.Double(id,"-",false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion ::= DMENOS Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenCod.Double(id,"-",true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion ::= DMAS Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenCod.Double(id,"+",true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion ::= Variable DMAS 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 GenCod.Double(id,"+",false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= ENTERO 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= AP Expresion CP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= Expresion MOD Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.mod(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion ::= MENOS Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.mod("0",exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion DIV Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.div(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion ::= Expresion POR Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.por(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion ::= Expresion MENOS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.menos(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion MAS Expresion 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=GenCod.mas(exp1,exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion ::= Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=TablaSimbolo.buscar(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion ::= Variable IGUAL Expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenCod.asig(TablaSimbolo.buscar(id),expr); RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Variable ::= IDENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(asigTipo) RESULT=id;
				else{
					if(TablaSimbolo.existe(id)) RESULT = id;
					else GenCod.error();
				}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionAsig ::= Variable 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsig",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpresionAsig ::= Variable IGUAL Expresion 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 GenCod.asig(id,expr); RESULT=id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpresionAsig",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parteELSE ::= ELSE Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parteELSE ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parteELSE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Pasos ::= STEP Expresion 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pasos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Pasos ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pasos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AFor ::= FOR 
            {
              EtiquetaDoble RESULT =null;
		 RESULT=new EtiquetaDoble(GenCod.getLabel(),GenCod.getLabel()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AWhile ::= WHILE 
            {
              String RESULT =null;
		 RESULT=GenCod.getLabel();; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AWhile",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ADo ::= DO 
            {
              String RESULT =null;
		 RESULT=GenCod.getLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ADo",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AIf ::= IF 
            {
              String RESULT =null;
		 RESULT= GenCod.getLabel(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AIf",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Modo ::= DOWNTO 
            {
              Boolean RESULT =null;
		
		RESULT = false;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Modo ::= TO 
            {
              Boolean RESULT =null;
		
		RESULT = true;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Modo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Tipo ::= INT 
            {
              Integer RESULT =null;
		 RESULT=Tipo.INT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // List_declar_var ::= List_declar_var COMA ExpresionAsig 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = type;
					Simbolo sb = new Simbolo(null,type,TablaSimbolo.indice());
					TablaSimbolo.addSimb(id,sb);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // List_declar_var ::= Tipo NT$11 ExpresionAsig 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = type;
					Simbolo sb = new Simbolo(null,type,TablaSimbolo.indice());
					TablaSimbolo.addSimb(id,sb);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("List_declar_var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$11 ::= 
            {
              Integer RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer type = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 asigTipo=true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Sentencia_simp ::= PRINT AP Expresion CP PYC 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String expr = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 GenCod.print(expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sentencia_simp ::= AFor Expresion Modo Expresion NT$9 Pasos NT$10 DO Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
				GenCod.goTo(f.f());
				GenCod.label(aux.f() );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$10 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				String paso = num==null?"1":num;
				if(m)GenCod.asig(exp1,exp1+" + "+paso);
				else GenCod.asig(exp1,exp1+" - "+paso);
				GenCod.goTo(f.v());
				GenCod.label(aux.v());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$9 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble f = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

				GenCod.label(f.v());
				if(m) aux=GenCod.condicion(exp2,If.LT,exp1);
				else aux=GenCod.condicion(exp1,If.LT,exp2);
				GenCod.label(f.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Sentencia_simp ::= AFor AP Expresion PYC NT$6 Condicion PYC NT$7 Expresion CP NT$8 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 GenCod.goTo(afor.f());
				   GenCod.label(c.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 GenCod.goTo(afor.v());
				   GenCod.label(c.v());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(afor.f()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$6 ::= 
            {
              Object RESULT =null;
		int aforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aforright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble afor = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 GenCod.label(afor.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Sentencia_simp ::= ADo NT$5 Sentencia WHILE AP Condicion CP PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ado = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 GenCod.label(c.v());
				   GenCod.goTo(ado);
				   GenCod.label(c.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$5 ::= 
            {
              Object RESULT =null;
		int adoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int adoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ado = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GenCod.label(ado); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Sentencia_simp ::= AWhile NT$3 AP Condicion CP NT$4 Sentencia 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String awhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 GenCod.goTo(awhile);
				   GenCod.label(c.f());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String awhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		EtiquetaDoble c = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 GenCod.label(c.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
		int awhileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int awhileright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String awhile = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GenCod.label(awhile); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Sentencia_simp ::= AIf AP Condicion NT$1 CP Sentencia NT$2 parteELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String aif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 GenCod.label(aif); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String aif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 GenCod.goTo(aif); 
				GenCod.label(cond.f()); 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int aifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String aif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EtiquetaDoble cond = (EtiquetaDoble)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 GenCod.label(cond.v()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Sentencia_simp ::= List_declar_var PYC 
            {
              Object RESULT =null;
		 asigTipo=false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_simp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Sentencia_comp ::= AL NT$0 Lista_de_sent CL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					TablaSimbolo.limpiar(TablaSimbolo.indice());
					TablaSimbolo.finBloque();
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia_comp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
 TablaSimbolo.nuevoBloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= Sentencia_comp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= Sentencia_simp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Lista_de_sent ::= Lista_de_sent Sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Lista_de_sent ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lista_de_sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= error 
            {
              Object RESULT =null;
		 GenCod.error(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Lista_de_sent 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

